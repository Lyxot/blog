<!DOCTYPE html><html lang="zh-CN" data-theme="light"><head><meta charset="UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1.0,viewport-fit=cover"><title>旧手机拯救计划 - 在Android手机上部署Docker与LXC | 行雺のBlog | Hexo</title><meta name="author" content="行雺"><meta name="copyright" content="行雺"><meta name="format-detection" content="telephone=no"><meta name="theme-color" content="#ffffff"><meta name="description" content="一切的前提是安装了支持 Docker/LXC 的内核本文使用的设备为小米 8SE，如果你跟我是同一个型号，可以使用我发布的内核 (适用于 MIUI12/12.5，安卓 10) 我采用的方案是在 chroot 容器中启动 Docker 与 LXC，可以省去很多不必要的麻烦，配置起来更简单，且几乎没有性能损失 安装 Linux DeployGithub下载 需要 root 权限 配">
<meta property="og:type" content="article">
<meta property="og:title" content="旧手机拯救计划 - 在Android手机上部署Docker与LXC">
<meta property="og:url" content="https://lyxot.github.io/blog/posts/%E6%8C%87%E5%8D%97/deploy-docker-lxc-on-android">
<meta property="og:site_name" content="行雺のBlog | Hexo">
<meta property="og:description" content="一切的前提是安装了支持 Docker/LXC 的内核本文使用的设备为小米 8SE，如果你跟我是同一个型号，可以使用我发布的内核 (适用于 MIUI12/12.5，安卓 10) 我采用的方案是在 chroot 容器中启动 Docker 与 LXC，可以省去很多不必要的麻烦，配置起来更简单，且几乎没有性能损失 安装 Linux DeployGithub下载 需要 root 权限 配">
<meta property="og:locale" content="zh_CN">
<meta property="og:image" content="https://q2.qlogo.cn/headimg_dl?dst_uin=1169942595@qq.com&amp;spec=640">
<meta property="article:published_time" content="2023-08-10T06:30:25.000Z">
<meta property="article:modified_time" content="2025-08-24T06:33:20.848Z">
<meta property="article:author" content="行雺">
<meta property="article:tag" content="hexo,php,blog,行雺,博客,Github,Gitee,pages">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://q2.qlogo.cn/headimg_dl?dst_uin=1169942595@qq.com&amp;spec=640"><script type="application/ld+json">{
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": "旧手机拯救计划 - 在Android手机上部署Docker与LXC",
  "url": "https://lyxot.github.io/blog/posts/%E6%8C%87%E5%8D%97/deploy-docker-lxc-on-android",
  "image": "https://q2.qlogo.cn/headimg_dl?dst_uin=1169942595@qq.com&spec=640",
  "datePublished": "2023-08-10T06:30:25.000Z",
  "dateModified": "2025-08-24T06:33:20.848Z",
  "author": [
    {
      "@type": "Person",
      "name": "行雺",
      "url": "https://Lyxot.github.io/blog"
    }
  ]
}</script><link rel="shortcut icon" href="/blog/./favicon.png"><link rel="canonical" href="https://lyxot.github.io/blog/posts/%E6%8C%87%E5%8D%97/deploy-docker-lxc-on-android"><link rel="preconnect"><link rel="stylesheet" href="/blog/css/index.css"><link rel="stylesheet" href="/blog/pluginsSrc/@fortawesome/fontawesome-free/css/all.min.css"><script>
    (() => {
      
    const saveToLocal = {
      set: (key, value, ttl) => {
        if (!ttl) return
        const expiry = Date.now() + ttl * 86400000
        localStorage.setItem(key, JSON.stringify({ value, expiry }))
      },
      get: key => {
        const itemStr = localStorage.getItem(key)
        if (!itemStr) return undefined
        const { value, expiry } = JSON.parse(itemStr)
        if (Date.now() > expiry) {
          localStorage.removeItem(key)
          return undefined
        }
        return value
      }
    }

    window.btf = {
      saveToLocal,
      getScript: (url, attr = {}) => new Promise((resolve, reject) => {
        const script = document.createElement('script')
        script.src = url
        script.async = true
        Object.entries(attr).forEach(([key, val]) => script.setAttribute(key, val))
        script.onload = script.onreadystatechange = () => {
          if (!script.readyState || /loaded|complete/.test(script.readyState)) resolve()
        }
        script.onerror = reject
        document.head.appendChild(script)
      }),
      getCSS: (url, id) => new Promise((resolve, reject) => {
        const link = document.createElement('link')
        link.rel = 'stylesheet'
        link.href = url
        if (id) link.id = id
        link.onload = link.onreadystatechange = () => {
          if (!link.readyState || /loaded|complete/.test(link.readyState)) resolve()
        }
        link.onerror = reject
        document.head.appendChild(link)
      }),
      addGlobalFn: (key, fn, name = false, parent = window) => {
        if (!true && key.startsWith('pjax')) return
        const globalFn = parent.globalFn || {}
        globalFn[key] = globalFn[key] || {}
        globalFn[key][name || Object.keys(globalFn[key]).length] = fn
        parent.globalFn = globalFn
      }
    }
  
      
      const activateDarkMode = () => {
        document.documentElement.setAttribute('data-theme', 'dark')
        if (document.querySelector('meta[name="theme-color"]') !== null) {
          document.querySelector('meta[name="theme-color"]').setAttribute('content', '#0d0d0d')
        }
      }
      const activateLightMode = () => {
        document.documentElement.setAttribute('data-theme', 'light')
        if (document.querySelector('meta[name="theme-color"]') !== null) {
          document.querySelector('meta[name="theme-color"]').setAttribute('content', '#ffffff')
        }
      }

      btf.activateDarkMode = activateDarkMode
      btf.activateLightMode = activateLightMode

      const theme = saveToLocal.get('theme')
    
          theme === 'dark' ? activateDarkMode() : theme === 'light' ? activateLightMode() : null
        
      
      const asideStatus = saveToLocal.get('aside-status')
      if (asideStatus !== undefined) {
        document.documentElement.classList.toggle('hide-aside', asideStatus === 'hide')
      }
    
      
    const detectApple = () => {
      if (/iPad|iPhone|iPod|Macintosh/.test(navigator.userAgent)) {
        document.documentElement.classList.add('apple')
      }
    }
    detectApple()
  
    })()
  </script><script>const GLOBAL_CONFIG = {
  root: '/blog/',
  algolia: undefined,
  localSearch: undefined,
  translate: undefined,
  highlight: {"plugin":"highlight.js","highlightCopy":true,"highlightLang":true,"highlightHeightLimit":false,"highlightFullpage":false,"highlightMacStyle":false},
  copy: {
    success: '复制成功',
    error: '复制失败',
    noSupport: '浏览器不支持'
  },
  relativeDate: {
    homepage: false,
    post: false
  },
  runtime: '',
  dateSuffix: {
    just: '刚刚',
    min: '分钟前',
    hour: '小时前',
    day: '天前',
    month: '个月前'
  },
  copyright: undefined,
  lightbox: 'null',
  Snackbar: undefined,
  infinitegrid: {
    js: '/blog/pluginsSrc/@egjs/infinitegrid/dist/infinitegrid.min.js',
    buttonText: '加载更多'
  },
  isPhotoFigcaption: false,
  islazyloadPlugin: false,
  isAnchor: false,
  percent: {
    toc: true,
    rightside: false,
  },
  autoDarkmode: false
}</script><script id="config-diff">var GLOBAL_CONFIG_SITE = {
  title: '旧手机拯救计划 - 在Android手机上部署Docker与LXC',
  isHighlightShrink: false,
  isToc: true,
  pageType: 'post'
}</script><link rel="stylesheet" href="/css/modify.css"><meta name="generator" content="Hexo 7.3.0"></head><body><div id="loading-box"><div class="loading-left-bg"></div><div class="loading-right-bg"></div><div class="spinner-box"><div class="configure-border-1"><div class="configure-core"></div></div><div class="configure-border-2"><div class="configure-core"></div></div><div class="loading-word">加载中...</div></div></div><script>(()=>{
  const $loadingBox = document.getElementById('loading-box')
  const $body = document.body
  const preloader = {
    endLoading: () => {
      if ($loadingBox.classList.contains('loaded')) return
      $body.style.overflow = ''
      $loadingBox.classList.add('loaded')
    },
    initLoading: () => {
      $body.style.overflow = 'hidden'
      $loadingBox.classList.remove('loaded')
    }
  }

  preloader.initLoading()

  if (document.readyState === 'complete') {
    preloader.endLoading()
  } else {
    window.addEventListener('load', preloader.endLoading)
    document.addEventListener('DOMContentLoaded', preloader.endLoading)
    // Add timeout protection: force end after 7 seconds
    setTimeout(preloader.endLoading, 7000)
  }

  if (true) {
    btf.addGlobalFn('pjaxSend', preloader.initLoading, 'preloader_init')
    btf.addGlobalFn('pjaxComplete', preloader.endLoading, 'preloader_end')
  }
})()</script><div id="sidebar"><div id="menu-mask"></div><div id="sidebar-menus"><div class="avatar-img text-center"><img src="https://q2.qlogo.cn/headimg_dl?dst_uin=1169942595@qq.com&amp;spec=640" onerror="this.onerror=null;this.src='/blog/img/friend_404.gif'" alt="avatar"></div><div class="site-data text-center"><a href="/blog/archives/"><div class="headline">文章</div><div class="length-num">14</div></a><a href="/blog/tags/"><div class="headline">标签</div><div class="length-num">0</div></a><a href="/blog/categories/"><div class="headline">分类</div><div class="length-num">3</div></a></div><div class="menus_items"><div class="menus_item"><a class="site-page" href="https://hyli.xyz"><span> 个人网站</span></a></div><div class="menus_item"><a class="site-page" href="/blog/"><i class="fa-fw fas fa-home"></i><span> 主页</span></a></div><div class="menus_item"><a class="site-page" href="/blog/archives/"><i class="fa-fw fas fa-archive"></i><span> 归档</span></a></div><div class="menus_item"><a class="site-page" href="/blog/about/"><i class="fa-fw fas fa-heart"></i><span> 关于</span></a></div><div class="menus_item"><a class="site-page" href="https://github.com/Lyxot"><i class="fa-fw fab fa-github"></i><span> Github</span></a></div></div></div></div><div class="post type-post" id="body-wrap"><header class="post-bg" id="page-header" style="background-image: url(/blog/./background/032_47621790.jpg);"><nav id="nav"><span id="blog-info"><a class="nav-site-title" href="/blog/"><span class="site-name">行雺のBlog | Hexo</span></a><a class="nav-page-title" href="/blog/"><span class="site-name">旧手机拯救计划 - 在Android手机上部署Docker与LXC</span><span class="site-name"><i class="fa-solid fa-circle-arrow-left"></i><span>  返回首页</span></span></a></span><div id="menus"><div class="menus_items"><div class="menus_item"><a class="site-page" href="https://hyli.xyz"><span> 个人网站</span></a></div><div class="menus_item"><a class="site-page" href="/blog/"><i class="fa-fw fas fa-home"></i><span> 主页</span></a></div><div class="menus_item"><a class="site-page" href="/blog/archives/"><i class="fa-fw fas fa-archive"></i><span> 归档</span></a></div><div class="menus_item"><a class="site-page" href="/blog/about/"><i class="fa-fw fas fa-heart"></i><span> 关于</span></a></div><div class="menus_item"><a class="site-page" href="https://github.com/Lyxot"><i class="fa-fw fab fa-github"></i><span> Github</span></a></div></div><div id="toggle-menu"><span class="site-page"><i class="fas fa-bars fa-fw"></i></span></div></div></nav><div id="post-info"><h1 class="post-title">旧手机拯救计划 - 在Android手机上部署Docker与LXC</h1><div id="post-meta"><div class="meta-firstline"><span class="post-meta-date"><i class="far fa-calendar-alt fa-fw post-meta-icon"></i><span class="post-meta-label">发表于</span><time class="post-meta-date-created" datetime="2023-08-10T06:30:25.000Z" title="发表于 2023-08-10 14:30:25">2023-08-10</time><span class="post-meta-separator">|</span><i class="fas fa-history fa-fw post-meta-icon"></i><span class="post-meta-label">更新于</span><time class="post-meta-date-updated" datetime="2025-08-24T06:33:20.848Z" title="更新于 2025-08-24 14:33:20">2025-08-24</time></span><span class="post-meta-categories"><span class="post-meta-separator">|</span><i class="fas fa-inbox fa-fw post-meta-icon"></i><a class="post-meta-categories" href="/blog/categories/%E6%8C%87%E5%8D%97/">指南</a></span></div><div class="meta-secondline"><span class="post-meta-separator">|</span><span class="post-meta-wordcount"><i class="far fa-file-word fa-fw post-meta-icon"></i><span class="post-meta-label">总字数:</span><span class="word-count">1.1k</span><span class="post-meta-separator">|</span><i class="far fa-clock fa-fw post-meta-icon"></i><span class="post-meta-label">阅读时长:</span><span>4分钟</span></span></div></div></div></header><main class="layout" id="content-inner"><div id="post"><div class="top-img" style="background-image: url(/blog/./background/032_47621790.jpg);"></div><article class="container post-content" id="article-container"><div id="post-outdate-notice" data="{&quot;limitDay&quot;:500,&quot;messagePrev&quot;:&quot;It has been&quot;,&quot;messageNext&quot;:&quot;days since the last update, the content of the article may be outdated.&quot;,&quot;postUpdate&quot;:&quot;2025-08-24 14:33:20&quot;}" hidden=""></div><p>一切的前提是安装了支持 Docker/LXC 的内核<br>本文使用的设备为小米 8SE，如果你跟我是同一个型号，可以使用我发布的<a target="_blank" rel="noopener" href="https://hyli.xyz/posts/release/miui12-kernelsu-docker-lxc-kernel-for-xiaomi-8se">内核</a> (适用于 MIUI12/12.5，安卓 10)</p>
<p>我采用的方案是在 chroot 容器中启动 Docker 与 LXC，可以省去很多不必要的麻烦，配置起来更简单，且几乎没有性能损失<br><img src="https://s.hyli.xyz/img/2023/08/11/1691759481.png"></p>
<h2 id="安装-Linux-Deploy"><a href="#安装-Linux-Deploy" class="headerlink" title="安装 Linux Deploy"></a>安装 Linux Deploy</h2><p>Github<a target="_blank" rel="noopener" href="https://github.com/lateautumn233/Linuxdeploy-Pro/releases/latest">下载</a></p>
<p>需要 root 权限</p>
<h3 id="配置-Ubuntu-容器"><a href="#配置-Ubuntu-容器" class="headerlink" title="配置 Ubuntu 容器"></a>配置 Ubuntu 容器</h3><table>
<thead>
<tr>
<th>选项</th>
<th>内容</th>
</tr>
</thead>
<tbody><tr>
<td>发行版</td>
<td>Ubuntu</td>
</tr>
<tr>
<td>发行版 GNU/Linux 版本</td>
<td><code>jammy(22.04)</code> (推荐)</td>
</tr>
<tr>
<td>源地址</td>
<td><code>https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/</code></td>
</tr>
<tr>
<td>安装类型</td>
<td>镜像文件</td>
</tr>
<tr>
<td>镜像大小 (MB)</td>
<td><code>8192+</code> (推荐)</td>
</tr>
<tr>
<td>用户名</td>
<td><code>root</code></td>
</tr>
<tr>
<td>本地化</td>
<td><code>zh_CN.UTF-8</code></td>
</tr>
<tr>
<td>DNS</td>
<td><code>223.5.5.5</code> (推荐)</td>
</tr>
<tr>
<td>初始化</td>
<td>启用</td>
</tr>
<tr>
<td>初始化系统</td>
<td><code>sysv</code></td>
</tr>
<tr>
<td>挂载</td>
<td>启用</td>
</tr>
<tr>
<td>挂载点列表</td>
<td>见下文</td>
</tr>
<tr>
<td>SSH</td>
<td>启用</td>
</tr>
<tr>
<td>SSH 设置→端口</td>
<td><code>1024+</code> (推荐)</td>
</tr>
<tr>
<td><img src="https://s.hyli.xyz/img/2023/08/11/1691759556.jpg"></td>
<td></td>
</tr>
</tbody></table>
<h4 id="挂载点列表"><a href="#挂载点列表" class="headerlink" title="挂载点列表"></a>挂载点列表</h4><p>先挂载 <code>cgroup</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su -c <span class="string">"mount -t tmpfs -o mode=755 tmpfs /sys/fs/cgroup &amp;&amp; mkdir -p /sys/fs/cgroup/devices &amp;&amp; mount -t cgroup -o devices cgroup /sys/fs/cgroup/devices &amp;&amp; mkdir -p /sys/fs/cgroup/systemd &amp;&amp; mount -t cgroup cgroup -o none,name=systemd /sys/fs/cgroup/systemd"</span></span><br></pre></td></tr></tbody></table></figure>

<p>在手机终端执行，看输出中的挂载点</p>
<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su -c <span class="string">"mount | grep cgroup"</span></span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://s.hyli.xyz/img/2023/08/12/1691817327.png"></p>
<p>把输出中的挂载点全部挂载上，***注意顺序：***先挂载<code>/sys/fs/cgroup</code>目录下的，再挂载<code>/dev</code>目录下的，比如我这里就是</p>
<p><img src="https://s.hyli.xyz/img/2023/08/11/1691759568.jpg"></p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>返回主界面，点击右上角安装，看到 <code>&lt;&lt;&lt; deploy</code> 后点击启动</p>
<p><img src="https://s.hyli.xyz/img/2023/08/10/1691657236.jpg"></p>
<p>使用任意 ssh 工具连接到容器 <code>ssh root@IP -p端口</code></p>
<p>例如 <code>ssh root@127.0.0.1 -p8023</code></p>
<h2 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h2><h3 id="添加仓库和公钥"><a href="#添加仓库和公钥" class="headerlink" title="添加仓库和公钥"></a>添加仓库和公钥</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install ca-certificates curl gnupg</span><br><span class="line">install -m 0755 -d /etc/apt/keyrings</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br><span class="line"><span class="built_in">chmod</span> a+r /etc/apt/keyrings/docker.gpg</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">"deb [arch="</span>$(dpkg --print-architecture)<span class="string">" signed-by=/etc/apt/keyrings/docker.gpg] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu \</span></span><br><span class="line"><span class="string">  "</span>$(. /etc/os-release &amp;&amp; <span class="built_in">echo</span> <span class="string">"<span class="variable">$VERSION_CODENAME</span>"</span>)<span class="string">" stable"</span> | \</span><br><span class="line">  <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></tbody></table></figure>

<h3 id="安装-docker-ce"><a href="#安装-docker-ce" class="headerlink" title="安装 docker-ce"></a>安装 docker-ce</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></tbody></table></figure>

<h3 id="启动-docker"><a href="#启动-docker" class="headerlink" title="启动 docker"></a>启动 docker</h3><p>挂载 <code>cgroup</code>，每次重启手机，都需要在手机终端运行 (<em><strong>注意是手机终端，不是 chroot 容器终端</strong></em>)，每次开机执行一次即可。如果是我发布的内核，安装过<code>kernel-fix</code>模块后不需要这一步</p>
<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su -c <span class="string">"mount -t tmpfs -o mode=755 tmpfs /sys/fs/cgroup &amp;&amp; mkdir -p /sys/fs/cgroup/devices &amp;&amp; mount -t cgroup -o devices cgroup /sys/fs/cgroup/devices &amp;&amp; mkdir -p /sys/fs/cgroup/systemd &amp;&amp; mount -t cgroup cgroup -o none,name=systemd /sys/fs/cgroup/systemd"</span></span><br></pre></td></tr></tbody></table></figure>
<p>启动 <code>dockerd</code>，每次重启 chroot 容器都需要再次运行</p>
<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOCKER_RAMDISK=<span class="literal">true</span> dockerd --iptables=<span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure>

<p>另开一个终端，ssh 连接到容器</p>
<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> hello-world</span><br></pre></td></tr></tbody></table></figure>

<p>看到 <code>Hello from Docker!</code> 和一大串话就是安装好了<br><img src="https://s.hyli.xyz/img/2023/08/10/1691653630.png"></p>
<p>注意 Docker 容器要上网就必须使用 host 模式，在启动命令里添加 <code>--net=host</code></p>
<h3 id="配置-dockerd-自启动"><a href="#配置-dockerd-自启动" class="headerlink" title="配置 dockerd 自启动"></a>配置 dockerd 自启动</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'DOCKER_OPTS="--iptables=false"'</span> &gt;&gt; /etc/default/docker</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export DOCKER_RAMDISK=true'</span> &gt;&gt; /etc/default/docker</span><br></pre></td></tr></tbody></table></figure>
<p>重启 chroot 容器后可以直接使用 docker，不需要再启动 <code>dockerd</code></p>
<h2 id="安装-LXC"><a href="#安装-LXC" class="headerlink" title="安装 LXC"></a>安装 LXC</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install lxc wget</span><br></pre></td></tr></tbody></table></figure>
<h3 id="配置-LXC"><a href="#配置-LXC" class="headerlink" title="配置 LXC"></a>配置 LXC</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"lxc.init.cmd = /sbin/init systemd.unified_cgroup_hierarchy"</span> &gt;&gt; /usr/share/lxc/config/common.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"lxc.net.0.type = none"</span> &gt; /etc/lxc/default.conf</span><br></pre></td></tr></tbody></table></figure>
<p>挂载 <code>cgroup</code>，每次重启手机，都需要在手机终端运行 (<em><strong>注意是手机终端，不是 chroot 容器终端</strong></em>)，每次开机执行一次即可。如果是我发布的内核，安装过<code>kernel-fix</code>模块后不需要这一步</p>
<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su -c <span class="string">"mount -t tmpfs -o mode=755 tmpfs /sys/fs/cgroup &amp;&amp; mkdir -p /sys/fs/cgroup/devices &amp;&amp; mount -t cgroup -o devices cgroup /sys/fs/cgroup/devices &amp;&amp; mkdir -p /sys/fs/cgroup/systemd &amp;&amp; mount -t cgroup cgroup -o none,name=systemd /sys/fs/cgroup/systemd"</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="创建-LXC-容器"><a href="#创建-LXC-容器" class="headerlink" title="创建 LXC 容器"></a>创建 LXC 容器</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lxc-create -t download -n 容器名 -- --server mirrors.tuna.tsinghua.edu.cn/lxc-images</span><br></pre></td></tr></tbody></table></figure>

<p>以 <code>Ubuntu 22.04</code> 为例，依次输入 <code>ubuntu jammy arm64</code></p>
<h4 id="改密码"><a href="#改密码" class="headerlink" title="改密码"></a>改密码</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chroot</span> /var/lib/lxc/容器名/rootfs /bin/passwd</span><br></pre></td></tr></tbody></table></figure>

<p>输入密码 回车</p>
<p>再次输入密码 回车</p>
<h3 id="启动-LXC-容器"><a href="#启动-LXC-容器" class="headerlink" title="启动 LXC 容器"></a>启动 LXC 容器</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lxc-start -n 容器名</span><br></pre></td></tr></tbody></table></figure>

<h3 id="进入-LXC-容器"><a href="#进入-LXC-容器" class="headerlink" title="进入 LXC 容器"></a>进入 LXC 容器</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lxc-console -n 容器名</span><br></pre></td></tr></tbody></table></figure>

<p>输入用户名 root 回车</p>
<p>输入密码 回车</p>
<p>按 Ctrl + a + q 退出容器</p>
<h4 id="改-DNS-必改"><a href="#改-DNS-必改" class="headerlink" title="改 DNS 必改!!"></a>改 DNS <em><strong>必改!!</strong></em></h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'nameserver 223.5.5.5'</span> &gt; /etc/resolv.conf</span><br></pre></td></tr></tbody></table></figure>

<h4 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'s|http://ports.ubuntu.com/ubuntu-ports|https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports|g'</span> /etc/apt/sources.list</span><br></pre></td></tr></tbody></table></figure>

<h4 id="改密码-1"><a href="#改密码-1" class="headerlink" title="改密码"></a>改密码</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></tbody></table></figure>

<p>输入密码 回车</p>
<p>再次输入密码 回车</p>
</article><div class="post-copyright"><div class="post-copyright__author"><span class="post-copyright-meta"><i class="fas fa-circle-user fa-fw"></i>文章作者: </span><span class="post-copyright-info"><a href="https://Lyxot.github.io/blog">行雺</a></span></div><div class="post-copyright__type"><span class="post-copyright-meta"><i class="fas fa-square-arrow-up-right fa-fw"></i>文章链接: </span><span class="post-copyright-info"><a href="https://lyxot.github.io/blog/posts/%E6%8C%87%E5%8D%97/deploy-docker-lxc-on-android">https://lyxot.github.io/blog/posts/%E6%8C%87%E5%8D%97/deploy-docker-lxc-on-android</a></span></div><div class="post-copyright__notice"><span class="post-copyright-meta"><i class="fas fa-circle-exclamation fa-fw"></i>版权声明: </span><span class="post-copyright-info">本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">CC BY-NC-SA 4.0</a> 许可协议。转载请注明来源 <a href="https://Lyxot.github.io/blog" target="_blank">行雺のBlog | Hexo</a>！</span></div></div><div class="tag_share"><div class="post-share"><div class="social-share" data-image="https://q2.qlogo.cn/headimg_dl?dst_uin=1169942595@qq.com&amp;spec=640" data-sites="facebook,twitter,wechat,weibo,qq"></div><link rel="stylesheet" href="/blog/pluginsSrc/butterfly-extsrc/sharejs/dist/css/share.min.css" media="print" onload="this.media='all'"><script src="/blog/pluginsSrc/butterfly-extsrc/sharejs/dist/js/social-share.min.js" defer=""></script></div></div><nav class="pagination-post" id="pagination"><a class="pagination-related" href="/blog/posts/%E5%8F%91%E5%B8%83/miui12-kernelsu-docker-lxc-kernel-for-xiaomi-8se" title="小米8SE(Sirius) MIUI12/12.5 KernelSU内核 支持Docker/LXC"><div class="cover" style="background: var(--default-bg-color)"></div><div class="info"><div class="info-1"><div class="info-item-1">上一篇</div><div class="info-item-2">小米8SE(Sirius) MIUI12/12.5 KernelSU内核 支持Docker/LXC</div></div><div class="info-2"><div class="info-item-1">        简介 编译日期: 2023.08.11 适用系统: 官方MIUI12/12.5, 安卓10 新增功能: 支持KernelSU, Docker, LXC 刷入方法: TWRP刷入 说明: 如果你不知道这是什么，请不要刷入 本内核仅在官方 MIUI12/12.5(安卓10)上测试通过，其它系统请自测 内核源码来自 Guozhiye，在他的基础之上进行编译，拥有他的内核的所有优化 刷入后请安装 KernelSU 管理器来使用 KernelSU 刷入内核后开机提示”您的设备内部出现问题”，不影响使用，解决方法见下一条 模块 kernel-fix 是本内核的附属模块，解决开机提示”您的设备内部出现问题”，并自动挂载 cgroup    下载蓝奏云内核: https://wwi.lanzoup.com/iWKyz1np52fc模块: https://wwi.lanzoup.com/iTXlH1np52ah密码: 3fyw 归档内核: 2023.08.11: sirius_4.9.194-g8a8f667ec_23.8.11.zip 2023.08.12： ...</div></div></div></a><a class="pagination-related" href="/blog/posts/%E6%9E%84%E5%BB%BA/compile-kernel-for-xiaomi-8-se" title="给小米8SE(Sirius)编译内核"><div class="cover" style="background: var(--default-bg-color)"></div><div class="info text-right"><div class="info-1"><div class="info-item-1">下一篇</div><div class="info-item-2">给小米8SE(Sirius)编译内核</div></div><div class="info-2"><div class="info-item-1">MIUI123456789101112131415git clone https://github.com/LineageOS/android_prebuilts_clang_kernel_linux-x86_clang-r416183b --depth=1git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 -b android-10.0.0_r47 --depth=1git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9 -b android-10.0.0_r47 --depth=1git clone https://github.com/Guozhiye/sirius_Kernel.git --depth=1CLANG=~/android_prebuilts...</div></div></div></a></nav></div><div class="aside-content" id="aside-content"><div class="card-widget card-info text-center"><div class="avatar-img"><img src="https://q2.qlogo.cn/headimg_dl?dst_uin=1169942595@qq.com&amp;spec=640" onerror="this.onerror=null;this.src='/blog/img/friend_404.gif'" alt="avatar"></div><div class="author-info-name">行雺</div><div class="author-info-description">Tech otakus save the world.</div><div class="site-data"><a href="/blog/archives/"><div class="headline">文章</div><div class="length-num">14</div></a><a href="/blog/tags/"><div class="headline">标签</div><div class="length-num">0</div></a><a href="/blog/categories/"><div class="headline">分类</div><div class="length-num">3</div></a></div><a id="card-info-btn" href="https://github.com/Lyxot"><i class="fab fa-github"></i><span>Follow Me</span></a><div class="card-info-social-icons"><a class="social-icon" href="https://github.com/Lyxot" target="_blank" title="Github"><i class="fab fa-github" style="color: #24292e;"></i></a></div></div><div class="sticky_layout"><div class="card-widget" id="card-toc"><div class="item-headline"><i class="fas fa-stream"></i><span>目录</span><span class="toc-percentage"></span></div><div class="toc-content"><ol class="toc"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%AE%89%E8%A3%85-Linux-Deploy"><span class="toc-number">1.</span> <span class="toc-text">安装 Linux Deploy</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E9%85%8D%E7%BD%AE-Ubuntu-%E5%AE%B9%E5%99%A8"><span class="toc-number">1.1.</span> <span class="toc-text">配置 Ubuntu 容器</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E6%8C%82%E8%BD%BD%E7%82%B9%E5%88%97%E8%A1%A8"><span class="toc-number">1.1.1.</span> <span class="toc-text">挂载点列表</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%90%AF%E5%8A%A8"><span class="toc-number">1.2.</span> <span class="toc-text">启动</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%AE%89%E8%A3%85-docker"><span class="toc-number">2.</span> <span class="toc-text">安装 docker</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%B7%BB%E5%8A%A0%E4%BB%93%E5%BA%93%E5%92%8C%E5%85%AC%E9%92%A5"><span class="toc-number">2.1.</span> <span class="toc-text">添加仓库和公钥</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%AE%89%E8%A3%85-docker-ce"><span class="toc-number">2.2.</span> <span class="toc-text">安装 docker-ce</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%90%AF%E5%8A%A8-docker"><span class="toc-number">2.3.</span> <span class="toc-text">启动 docker</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E9%85%8D%E7%BD%AE-dockerd-%E8%87%AA%E5%90%AF%E5%8A%A8"><span class="toc-number">2.4.</span> <span class="toc-text">配置 dockerd 自启动</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%AE%89%E8%A3%85-LXC"><span class="toc-number">3.</span> <span class="toc-text">安装 LXC</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%AE%89%E8%A3%85"><span class="toc-number">3.1.</span> <span class="toc-text">安装</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E9%85%8D%E7%BD%AE-LXC"><span class="toc-number">3.2.</span> <span class="toc-text">配置 LXC</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%88%9B%E5%BB%BA-LXC-%E5%AE%B9%E5%99%A8"><span class="toc-number">3.3.</span> <span class="toc-text">创建 LXC 容器</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E6%94%B9%E5%AF%86%E7%A0%81"><span class="toc-number">3.3.1.</span> <span class="toc-text">改密码</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%90%AF%E5%8A%A8-LXC-%E5%AE%B9%E5%99%A8"><span class="toc-number">3.4.</span> <span class="toc-text">启动 LXC 容器</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E8%BF%9B%E5%85%A5-LXC-%E5%AE%B9%E5%99%A8"><span class="toc-number">3.5.</span> <span class="toc-text">进入 LXC 容器</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E6%94%B9-DNS-%E5%BF%85%E6%94%B9"><span class="toc-number">3.5.1.</span> <span class="toc-text">改 DNS 必改!!</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E6%8D%A2%E6%BA%90"><span class="toc-number">3.5.2.</span> <span class="toc-text">换源</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E6%94%B9%E5%AF%86%E7%A0%81-1"><span class="toc-number">3.5.3.</span> <span class="toc-text">改密码</span></a></li></ol></li></ol></li></ol></div></div><div class="card-widget card-recent-post"><div class="item-headline"><i class="fas fa-history"></i><span>最新文章</span></div><div class="aside-list"><div class="aside-list-item no-cover"><div class="content"><a class="title" href="/blog/posts/%E6%9E%84%E5%BB%BA/compile-nginx" title="编译Nginx以升级openssl并支持brotli">编译Nginx以升级openssl并支持brotli</a><time datetime="2025-02-05T09:06:01.000Z" title="发表于 2025-02-05 17:06:01">2025-02-05</time></div></div><div class="aside-list-item no-cover"><div class="content"><a class="title" href="/blog/posts/%E6%9E%84%E5%BB%BA/compile-immortalwrt" title="自行编译OpenWrt(ImmortalWrt) 固件">自行编译OpenWrt(ImmortalWrt) 固件</a><time datetime="2025-02-03T21:53:38.125Z" title="发表于 2025-02-04 05:53:38">2025-02-04</time></div></div><div class="aside-list-item no-cover"><div class="content"><a class="title" href="/blog/posts/%E6%9E%84%E5%BB%BA/compile-lede" title="自行编译OpenWrt(LEDE) 固件">自行编译OpenWrt(LEDE) 固件</a><time datetime="2025-02-03T09:33:20.566Z" title="发表于 2025-02-03 17:33:20">2025-02-03</time></div></div><div class="aside-list-item no-cover"><div class="content"><a class="title" href="/blog/notes/4" title="行雺の小站 站点正式开通">行雺の小站 站点正式开通</a><time datetime="2025-02-03T01:52:19.000Z" title="发表于 2025-02-03 09:52:19">2025-02-03</time></div></div><div class="aside-list-item no-cover"><div class="content"><a class="title" href="/blog/posts/%E6%8C%87%E5%8D%97/create-unraid-vm-in-pve-and-boot-from-virtual-disk" title="在 PVE 中创建 Unraid 虚拟机并使用虚拟磁盘启动 Unraid 虚拟机">在 PVE 中创建 Unraid 虚拟机并使用虚拟磁盘启动 Unraid 虚拟机</a><time datetime="2024-08-25T06:25:18.000Z" title="发表于 2024-08-25 14:25:18">2024-08-25</time></div></div></div></div></div></div></main><footer id="footer"><div class="footer-other"><div class="footer-copyright"><span class="copyright">©&nbsp;2023 - 2025 By 行雺</span></div></div></footer></div><div id="rightside"><div id="rightside-config-hide"><button id="readmode" type="button" title="阅读模式"><i class="fas fa-book-open"></i></button><button id="darkmode" type="button" title="日间和夜间模式切换"><i class="fas fa-adjust"></i></button><button id="hide-aside-btn" type="button" title="单栏和双栏切换"><i class="fas fa-arrows-alt-h"></i></button></div><div id="rightside-config-show"><button id="rightside-config" type="button" title="设置"><i class="fas fa-cog fa-spin"></i></button><button class="close" id="mobile-toc-button" type="button" title="目录"><i class="fas fa-list-ul"></i></button><button id="go-up" type="button" title="回到顶部"><span class="scroll-percent"></span><i class="fas fa-arrow-up"></i></button></div></div><div><script src="/blog/js/utils.js"></script><script src="/blog/js/main.js"></script><script src="/blog/pluginsSrc/instant.page/instantpage.js" type="module"></script><div class="js-pjax"></div><script src="/blog/pluginsSrc/pjax/pjax.min.js"></script><script>(() => {
  const pjaxSelectors = ["head > title","#config-diff","#body-wrap","#rightside-config-hide","#rightside-config-show",".js-pjax"]

  window.pjax = new Pjax({
    elements: 'a:not([target="_blank"])',
    selectors: pjaxSelectors,
    cacheBust: false,
    analytics: false,
    scrollRestoration: false
  })

  const triggerPjaxFn = (val) => {
    if (!val) return
    Object.values(val).forEach(fn => fn())
  }

  document.addEventListener('pjax:send', () => {
    // removeEventListener
    btf.removeGlobalFnEvent('pjaxSendOnce')
    btf.removeGlobalFnEvent('themeChange')

    // reset readmode
    const $bodyClassList = document.body.classList
    if ($bodyClassList.contains('read-mode')) $bodyClassList.remove('read-mode')

    triggerPjaxFn(window.globalFn.pjaxSend)
  })

  document.addEventListener('pjax:complete', () => {
    btf.removeGlobalFnEvent('pjaxCompleteOnce')
    document.querySelectorAll('script[data-pjax]').forEach(item => {
      const newScript = document.createElement('script')
      const content = item.text || item.textContent || item.innerHTML || ""
      Array.from(item.attributes).forEach(attr => newScript.setAttribute(attr.name, attr.value))
      newScript.appendChild(document.createTextNode(content))
      item.parentNode.replaceChild(newScript, item)
    })

    triggerPjaxFn(window.globalFn.pjaxComplete)
  })

  document.addEventListener('pjax:error', e => {
    if (e.request.status === 404) {
      const usePjax = true
      false
        ? (usePjax ? pjax.loadUrl('/blog/404') : window.location.href = '/blog/404')
        : window.location.href = e.request.responseURL
    }
  })
})()</script></div></body></html>