<!DOCTYPE html><html lang="zh-CN" data-theme="light"><head><meta charset="UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1.0,viewport-fit=cover"><title>在Linux云服务器上开启zram | 行雺のBlog | Hexo</title><meta name="author" content="行雺"><meta name="copyright" content="行雺"><meta name="format-detection" content="telephone=no"><meta name="theme-color" content="#ffffff"><meta name="description" content="前言zram 也称为 zRAM，先前称为 compcache。是 Linux 内核的核心功能，可提供虚拟内存压缩。zram 通过在 RAM 内压缩块设备的分页，直到必须使用硬盘的交换空间，避免在磁盘进行分页，从而提高性能。在本教程中，我将详细说明如何在 Ubuntu 22.04 配置或者启用 zRAM，设置 zRAM 的大小以及如何持久化 zRAM 的配置参数。如果你使用其他 Linux 系统，请">
<meta property="og:type" content="article">
<meta property="og:title" content="在Linux云服务器上开启zram">
<meta property="og:url" content="https://lyxot.github.io/blog/posts/%E6%8C%87%E5%8D%97/configure-zram-on-server">
<meta property="og:site_name" content="行雺のBlog | Hexo">
<meta property="og:description" content="前言zram 也称为 zRAM，先前称为 compcache。是 Linux 内核的核心功能，可提供虚拟内存压缩。zram 通过在 RAM 内压缩块设备的分页，直到必须使用硬盘的交换空间，避免在磁盘进行分页，从而提高性能。在本教程中，我将详细说明如何在 Ubuntu 22.04 配置或者启用 zRAM，设置 zRAM 的大小以及如何持久化 zRAM 的配置参数。如果你使用其他 Linux 系统，请">
<meta property="og:locale" content="zh_CN">
<meta property="og:image" content="https://q2.qlogo.cn/headimg_dl?dst_uin=1169942595@qq.com&amp;spec=640">
<meta property="article:published_time" content="2023-08-22T02:12:55.000Z">
<meta property="article:modified_time" content="2025-08-23T07:41:50.156Z">
<meta property="article:author" content="行雺">
<meta property="article:tag" content="hexo,php,blog,行雺,博客,Github,Gitee,pages">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://q2.qlogo.cn/headimg_dl?dst_uin=1169942595@qq.com&amp;spec=640"><script type="application/ld+json">{
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": "在Linux云服务器上开启zram",
  "url": "https://lyxot.github.io/blog/posts/%E6%8C%87%E5%8D%97/configure-zram-on-server",
  "image": "https://q2.qlogo.cn/headimg_dl?dst_uin=1169942595@qq.com&spec=640",
  "datePublished": "2023-08-22T02:12:55.000Z",
  "dateModified": "2025-08-23T07:41:50.156Z",
  "author": [
    {
      "@type": "Person",
      "name": "行雺",
      "url": "https://Lyxot.github.io/blog"
    }
  ]
}</script><link rel="shortcut icon" href="/blog/./favicon.png"><link rel="canonical" href="https://lyxot.github.io/blog/posts/%E6%8C%87%E5%8D%97/configure-zram-on-server"><link rel="preconnect"><link rel="stylesheet" href="/blog/css/index.css"><link rel="stylesheet" href="/blog/pluginsSrc/@fortawesome/fontawesome-free/css/all.min.css"><script>
    (() => {
      
    const saveToLocal = {
      set: (key, value, ttl) => {
        if (!ttl) return
        const expiry = Date.now() + ttl * 86400000
        localStorage.setItem(key, JSON.stringify({ value, expiry }))
      },
      get: key => {
        const itemStr = localStorage.getItem(key)
        if (!itemStr) return undefined
        const { value, expiry } = JSON.parse(itemStr)
        if (Date.now() > expiry) {
          localStorage.removeItem(key)
          return undefined
        }
        return value
      }
    }

    window.btf = {
      saveToLocal,
      getScript: (url, attr = {}) => new Promise((resolve, reject) => {
        const script = document.createElement('script')
        script.src = url
        script.async = true
        Object.entries(attr).forEach(([key, val]) => script.setAttribute(key, val))
        script.onload = script.onreadystatechange = () => {
          if (!script.readyState || /loaded|complete/.test(script.readyState)) resolve()
        }
        script.onerror = reject
        document.head.appendChild(script)
      }),
      getCSS: (url, id) => new Promise((resolve, reject) => {
        const link = document.createElement('link')
        link.rel = 'stylesheet'
        link.href = url
        if (id) link.id = id
        link.onload = link.onreadystatechange = () => {
          if (!link.readyState || /loaded|complete/.test(link.readyState)) resolve()
        }
        link.onerror = reject
        document.head.appendChild(link)
      }),
      addGlobalFn: (key, fn, name = false, parent = window) => {
        if (!true && key.startsWith('pjax')) return
        const globalFn = parent.globalFn || {}
        globalFn[key] = globalFn[key] || {}
        globalFn[key][name || Object.keys(globalFn[key]).length] = fn
        parent.globalFn = globalFn
      }
    }
  
      
      const activateDarkMode = () => {
        document.documentElement.setAttribute('data-theme', 'dark')
        if (document.querySelector('meta[name="theme-color"]') !== null) {
          document.querySelector('meta[name="theme-color"]').setAttribute('content', '#0d0d0d')
        }
      }
      const activateLightMode = () => {
        document.documentElement.setAttribute('data-theme', 'light')
        if (document.querySelector('meta[name="theme-color"]') !== null) {
          document.querySelector('meta[name="theme-color"]').setAttribute('content', '#ffffff')
        }
      }

      btf.activateDarkMode = activateDarkMode
      btf.activateLightMode = activateLightMode

      const theme = saveToLocal.get('theme')
    
          theme === 'dark' ? activateDarkMode() : theme === 'light' ? activateLightMode() : null
        
      
      const asideStatus = saveToLocal.get('aside-status')
      if (asideStatus !== undefined) {
        document.documentElement.classList.toggle('hide-aside', asideStatus === 'hide')
      }
    
      
    const detectApple = () => {
      if (/iPad|iPhone|iPod|Macintosh/.test(navigator.userAgent)) {
        document.documentElement.classList.add('apple')
      }
    }
    detectApple()
  
    })()
  </script><script>const GLOBAL_CONFIG = {
  root: '/blog/',
  algolia: undefined,
  localSearch: undefined,
  translate: undefined,
  highlight: {"plugin":"highlight.js","highlightCopy":true,"highlightLang":true,"highlightHeightLimit":false,"highlightFullpage":false,"highlightMacStyle":false},
  copy: {
    success: '复制成功',
    error: '复制失败',
    noSupport: '浏览器不支持'
  },
  relativeDate: {
    homepage: false,
    post: false
  },
  runtime: '',
  dateSuffix: {
    just: '刚刚',
    min: '分钟前',
    hour: '小时前',
    day: '天前',
    month: '个月前'
  },
  copyright: undefined,
  lightbox: 'null',
  Snackbar: undefined,
  infinitegrid: {
    js: '/blog/pluginsSrc/@egjs/infinitegrid/dist/infinitegrid.min.js',
    buttonText: '加载更多'
  },
  isPhotoFigcaption: false,
  islazyloadPlugin: false,
  isAnchor: false,
  percent: {
    toc: true,
    rightside: false,
  },
  autoDarkmode: false
}</script><script id="config-diff">var GLOBAL_CONFIG_SITE = {
  title: '在Linux云服务器上开启zram',
  isHighlightShrink: false,
  isToc: true,
  pageType: 'post'
}</script><link rel="stylesheet" href="/css/modify.css"><meta name="generator" content="Hexo 7.3.0"></head><body><div id="loading-box"><div class="loading-left-bg"></div><div class="loading-right-bg"></div><div class="spinner-box"><div class="configure-border-1"><div class="configure-core"></div></div><div class="configure-border-2"><div class="configure-core"></div></div><div class="loading-word">加载中...</div></div></div><script>(()=>{
  const $loadingBox = document.getElementById('loading-box')
  const $body = document.body
  const preloader = {
    endLoading: () => {
      if ($loadingBox.classList.contains('loaded')) return
      $body.style.overflow = ''
      $loadingBox.classList.add('loaded')
    },
    initLoading: () => {
      $body.style.overflow = 'hidden'
      $loadingBox.classList.remove('loaded')
    }
  }

  preloader.initLoading()

  if (document.readyState === 'complete') {
    preloader.endLoading()
  } else {
    window.addEventListener('load', preloader.endLoading)
    document.addEventListener('DOMContentLoaded', preloader.endLoading)
    // Add timeout protection: force end after 7 seconds
    setTimeout(preloader.endLoading, 7000)
  }

  if (true) {
    btf.addGlobalFn('pjaxSend', preloader.initLoading, 'preloader_init')
    btf.addGlobalFn('pjaxComplete', preloader.endLoading, 'preloader_end')
  }
})()</script><div id="sidebar"><div id="menu-mask"></div><div id="sidebar-menus"><div class="avatar-img text-center"><img src="https://q2.qlogo.cn/headimg_dl?dst_uin=1169942595@qq.com&amp;spec=640" onerror="this.onerror=null;this.src='/blog/img/friend_404.gif'" alt="avatar"></div><div class="site-data text-center"><a href="/blog/archives/"><div class="headline">文章</div><div class="length-num">16</div></a><a href="/blog/tags/"><div class="headline">标签</div><div class="length-num">0</div></a><a href="/blog/categories/"><div class="headline">分类</div><div class="length-num">3</div></a></div><div class="menus_items"><div class="menus_item"><a class="site-page" href="https://hyli.xyz"><span> 个人网站</span></a></div><div class="menus_item"><a class="site-page" href="/blog/"><i class="fa-fw fas fa-home"></i><span> 主页</span></a></div><div class="menus_item"><a class="site-page" href="/blog/archives/"><i class="fa-fw fas fa-archive"></i><span> 归档</span></a></div><div class="menus_item"><a class="site-page" href="/blog/about/"><i class="fa-fw fas fa-heart"></i><span> 关于</span></a></div><div class="menus_item"><a class="site-page" href="https://github.com/Lyxot"><i class="fa-fw fab fa-github"></i><span> Github</span></a></div></div></div></div><div class="post type-post" id="body-wrap"><header class="post-bg" id="page-header" style="background-image: url(/blog/./background/032_47621790.jpg);"><nav id="nav"><span id="blog-info"><a class="nav-site-title" href="/blog/"><span class="site-name">行雺のBlog | Hexo</span></a><a class="nav-page-title" href="/blog/"><span class="site-name">在Linux云服务器上开启zram</span><span class="site-name"><i class="fa-solid fa-circle-arrow-left"></i><span>  返回首页</span></span></a></span><div id="menus"><div class="menus_items"><div class="menus_item"><a class="site-page" href="https://hyli.xyz"><span> 个人网站</span></a></div><div class="menus_item"><a class="site-page" href="/blog/"><i class="fa-fw fas fa-home"></i><span> 主页</span></a></div><div class="menus_item"><a class="site-page" href="/blog/archives/"><i class="fa-fw fas fa-archive"></i><span> 归档</span></a></div><div class="menus_item"><a class="site-page" href="/blog/about/"><i class="fa-fw fas fa-heart"></i><span> 关于</span></a></div><div class="menus_item"><a class="site-page" href="https://github.com/Lyxot"><i class="fa-fw fab fa-github"></i><span> Github</span></a></div></div><div id="toggle-menu"><span class="site-page"><i class="fas fa-bars fa-fw"></i></span></div></div></nav><div id="post-info"><h1 class="post-title">在Linux云服务器上开启zram</h1><div id="post-meta"><div class="meta-firstline"><span class="post-meta-date"><i class="far fa-calendar-alt fa-fw post-meta-icon"></i><span class="post-meta-label">发表于</span><time class="post-meta-date-created" datetime="2023-08-22T02:12:55.000Z" title="发表于 2023-08-22 10:12:55">2023-08-22</time><span class="post-meta-separator">|</span><i class="fas fa-history fa-fw post-meta-icon"></i><span class="post-meta-label">更新于</span><time class="post-meta-date-updated" datetime="2025-08-23T07:41:50.156Z" title="更新于 2025-08-23 15:41:50">2025-08-23</time></span><span class="post-meta-categories"><span class="post-meta-separator">|</span><i class="fas fa-inbox fa-fw post-meta-icon"></i><a class="post-meta-categories" href="/blog/categories/%E6%8C%87%E5%8D%97/">指南</a></span></div><div class="meta-secondline"><span class="post-meta-separator">|</span><span class="post-meta-wordcount"><i class="far fa-file-word fa-fw post-meta-icon"></i><span class="post-meta-label">总字数:</span><span class="word-count">589</span><span class="post-meta-separator">|</span><i class="far fa-clock fa-fw post-meta-icon"></i><span class="post-meta-label">阅读时长:</span><span>2分钟</span></span></div></div></div></header><main class="layout" id="content-inner"><div id="post"><div class="top-img" style="background-image: url(/blog/./background/032_47621790.jpg);"></div><article class="container post-content" id="article-container"><div id="post-outdate-notice" data="{&quot;limitDay&quot;:500,&quot;messagePrev&quot;:&quot;It has been&quot;,&quot;messageNext&quot;:&quot;days since the last update, the content of the article may be outdated.&quot;,&quot;postUpdate&quot;:&quot;2025-08-23 15:41:50&quot;}" hidden=""></div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>zram 也称为 zRAM，先前称为 compcache。是 Linux 内核的核心功能，可提供虚拟内存压缩。<br>zram 通过在 RAM 内压缩块设备的分页，直到必须使用硬盘的交换空间，避免在磁盘进行分页，从而提高性能。<br>在本教程中，我将详细说明如何在 Ubuntu 22.04 配置或者启用 zRAM，设置 zRAM 的大小以及如何持久化 zRAM 的配置参数。<br>如果你使用其他 Linux 系统，请跳转到<code>其他Linux系统</code>章节。</p>
<h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Ubuntu 上有对应的 apt 软件包，可以使用进行安装</p>
<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install zram-config</span><br></pre></td></tr></tbody></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>安装后，会同时安装 systemctl 的服务，但是主要还是会依赖 zramctl 这个可执行文件</p>
<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zramctl -<span class="built_in">help</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改<code>/usr/bin/init-zram-swapping</code>，重启即可。下面附有我的配置，创建与 cpu 核心数量相同的块，zram 大小为内存 (不含 swap) 的一半，算法为<code>zstd</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">modprobe zram num_devices=$(<span class="built_in">nproc</span> --all)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Calculate memory to use for zram (1/2 of ram)</span></span><br><span class="line">totalmem=`LC_ALL=C free | grep -e <span class="string">"^Mem:"</span> | sed -e <span class="string">'s/^Mem: *//'</span> -e <span class="string">'s/  *.*//'</span>`</span><br><span class="line">mem=$((totalmem / <span class="number">2</span> * <span class="number">1024</span> / $(nproc --all)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># initialize the devices</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">seq</span> $(<span class="built_in">nproc</span> --all)); <span class="keyword">do</span></span><br><span class="line">        DEVNUMBER=$((i - <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"zstd"</span> &gt; /sys/block/zram<span class="variable">${DEVNUMBER}</span>/comp_algorithm</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$mem</span> &gt; /sys/block/zram<span class="variable">${DEVNUMBER}</span>/disksize</span><br><span class="line">        mkswap /dev/zram<span class="variable">${DEVNUMBER}</span></span><br><span class="line">        swapon -p 5 /dev/zram<span class="variable">${DEVNUMBER}</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="其它-Linux-系统"><a href="#其它-Linux-系统" class="headerlink" title="其它 Linux 系统"></a>其它 Linux 系统</h2><h3 id="创建脚本"><a href="#创建脚本" class="headerlink" title="创建脚本"></a>创建脚本</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> /usr/bin/init-zram-swapping</span><br><span class="line"><span class="built_in">chmod</span> +x /usr/bin/init-zram-swapping</span><br></pre></td></tr></tbody></table></figure>

<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>修改<code>/usr/bin/init-zram-swapping</code>。下面附有我的配置，创建与 cpu 核心数量相同的块，zram 大小为内存 (不含 swap) 的一半，算法为<code>zstd</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">modprobe zram num_devices=$(<span class="built_in">nproc</span> --all)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Calculate memory to use for zram (1/2 of ram)</span></span><br><span class="line">totalmem=`LC_ALL=C free | grep -e <span class="string">"^Mem:"</span> | sed -e <span class="string">'s/^Mem: *//'</span> -e <span class="string">'s/  *.*//'</span>`</span><br><span class="line">mem=$((totalmem / <span class="number">2</span> * <span class="number">1024</span> / $(nproc --all)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># initialize the devices</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">seq</span> $(<span class="built_in">nproc</span> --all)); <span class="keyword">do</span></span><br><span class="line">        DEVNUMBER=$((i - <span class="number">1</span>))</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"zstd"</span> &gt; /sys/block/zram<span class="variable">${DEVNUMBER}</span>/comp_algorithm</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$mem</span> &gt; /sys/block/zram<span class="variable">${DEVNUMBER}</span>/disksize</span><br><span class="line">        mkswap /dev/zram<span class="variable">${DEVNUMBER}</span></span><br><span class="line">        swapon -p 5 /dev/zram<span class="variable">${DEVNUMBER}</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="开机自启动，自动挂载-zram"><a href="#开机自启动，自动挂载-zram" class="headerlink" title="开机自启动，自动挂载 zram"></a>开机自启动，自动挂载 zram</h3><p>创建<code>/etc/systemd/system/zram.service</code></p>
<figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Swap with zram</span><br><span class="line">After=multi-user.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">RemainAfterExit=true</span><br><span class="line">ExecStart=/usr/bin/init-zram-swapping</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></tbody></table></figure>

<p>编辑文件后，运行<code>sudo systemctl enable zram</code>，重启即可</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a target="_blank" rel="noopener" href="https://blog4jimmy.com/2022/04/955.html">Ubuntu 启用 zram</a><br><a target="_blank" rel="noopener" href="https://www.myfreax.com/how-to-configure-zram-on-ubuntu-20-04/amp/">如何在 Ubuntu 20.04 开启 zRAM</a><br><a target="_blank" rel="noopener" href="https://untitled.pw/software/linux/2826.html">配置 ZRAM，实现 Linux 下的内存压缩，零成本低开销获得成倍内存扩增</a></p>
</article><div class="post-copyright"><div class="post-copyright__author"><span class="post-copyright-meta"><i class="fas fa-circle-user fa-fw"></i>文章作者: </span><span class="post-copyright-info"><a href="https://Lyxot.github.io/blog">行雺</a></span></div><div class="post-copyright__type"><span class="post-copyright-meta"><i class="fas fa-square-arrow-up-right fa-fw"></i>文章链接: </span><span class="post-copyright-info"><a href="https://lyxot.github.io/blog/posts/%E6%8C%87%E5%8D%97/configure-zram-on-server">https://lyxot.github.io/blog/posts/%E6%8C%87%E5%8D%97/configure-zram-on-server</a></span></div><div class="post-copyright__notice"><span class="post-copyright-meta"><i class="fas fa-circle-exclamation fa-fw"></i>版权声明: </span><span class="post-copyright-info">本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">CC BY-NC-SA 4.0</a> 许可协议。转载请注明来源 <a href="https://Lyxot.github.io/blog" target="_blank">行雺のBlog | Hexo</a>！</span></div></div><div class="tag_share"><div class="post-share"><div class="social-share" data-image="https://q2.qlogo.cn/headimg_dl?dst_uin=1169942595@qq.com&amp;spec=640" data-sites="facebook,twitter,wechat,weibo,qq"></div><link rel="stylesheet" href="/blog/pluginsSrc/butterfly-extsrc/sharejs/dist/css/share.min.css" media="print" onload="this.media='all'"><script src="/blog/pluginsSrc/butterfly-extsrc/sharejs/dist/js/social-share.min.js" defer=""></script></div></div><nav class="pagination-post" id="pagination"><a class="pagination-related" href="/blog/posts/%E6%8C%87%E5%8D%97/configure-zSwap-on-server" title="在Linux云服务器上开启zSwap"><div class="cover" style="background: var(--default-bg-color)"></div><div class="info"><div class="info-1"><div class="info-item-1">上一篇</div><div class="info-item-2">在Linux云服务器上开启zSwap</div></div><div class="info-2"><div class="info-item-1">什么是 zSwapzSwap 是 Linux 内核的一个功能，它为交换页提供了一个压缩的回写缓存，作为一种虚拟内存压缩形式。当内存页要被换出时，zSwap 不会把它们移到交换设备上，而是对它们进行压缩，然后把它们存储到系统 RAM 中动态分配的内存池中。后来，向实际的交换设备的回写被推迟了，甚至完全避免了，从而大大减少了需要交换的 Linux 系统的 I/O，其代价是需要额外的 CPU 周期来执行压缩。 zSwap 允许 Linux 更有效地利用 RAM，因为它实际上增加了内存容量，而不是在压缩/解压缩交换页时稍微增加 CPU 的使用。与 zram 相比的区别在于，zswap 与 swap 设备协同工作，而 zram 是内存中的交换设备，不需要后备交换设备。zSwap 存在于内核中，但默认并没有开启，要使用它必须通过修改配置文件开启。 主流内存压缩技术 zSwap  ​zSwap 是在 memory 与 flash 之间的一层缓存，当内存需要 swap 出去磁盘的时候，先通过压缩放到 zSwap 中去，zSwap 空间按需增长。达到一定程度后则会按照 LRU ...</div></div></div></a><a class="pagination-related" href="/blog/posts/%E5%8F%91%E5%B8%83/lineageos20-kernelsu-docker-lxc-kernel-for-xiaomi-8se" title="小米8SE(Sirius) LineageOS 20.0 KernelSU内核 支持Docker/LXC"><div class="cover" style="background: var(--default-bg-color)"></div><div class="info text-right"><div class="info-1"><div class="info-item-1">下一篇</div><div class="info-item-2">小米8SE(Sirius) LineageOS 20.0 KernelSU内核 支持Docker/LXC</div></div><div class="info-2"><div class="info-item-1">        简介 编译日期: 2024.02.08 适用系统: 官方 LineageOS 20.0, 安卓13 新增功能: 支持KernelSU, Docker, LXC 刷入方法: 在rec使用 adb sideload 说明: 如果你不知道这是什么，请不要刷入 本内核仅在官方 LineageOS 20.0(安卓13)上测试通过，其它系统请自测 内核源码来自 LineageOS 开源仓库，仅添加KernelSU、Docker、LXC支持 刷入后请安装 KernelSU 管理器来使用 KernelSU 刷入内核后开机提示”您的设备内部出现问题”，不影响使用，解决方法见下一条 模块 kernel-fix 是本内核的附属模块，解决开机提示”您的设备内部出现问题”，并自动挂载 cgroup    下载蓝奏云内核: https://wwi.lanzoup.com/ifVDL1nqbkjg模块: https://wwi.lanzoup.com/izh2l1nqbk8f密码: as68 归档内核: 2023.08.12：sirius_4.9.337-4804ea4922_23.8.12....</div></div></div></a></nav></div><div class="aside-content" id="aside-content"><div class="card-widget card-info text-center"><div class="avatar-img"><img src="https://q2.qlogo.cn/headimg_dl?dst_uin=1169942595@qq.com&amp;spec=640" onerror="this.onerror=null;this.src='/blog/img/friend_404.gif'" alt="avatar"></div><div class="author-info-name">行雺</div><div class="author-info-description">Tech otakus save the world.</div><div class="site-data"><a href="/blog/archives/"><div class="headline">文章</div><div class="length-num">16</div></a><a href="/blog/tags/"><div class="headline">标签</div><div class="length-num">0</div></a><a href="/blog/categories/"><div class="headline">分类</div><div class="length-num">3</div></a></div><a id="card-info-btn" href="https://github.com/Lyxot"><i class="fab fa-github"></i><span>Follow Me</span></a><div class="card-info-social-icons"><a class="social-icon" href="https://github.com/Lyxot" target="_blank" title="Github"><i class="fab fa-github" style="color: #24292e;"></i></a></div></div><div class="sticky_layout"><div class="card-widget" id="card-toc"><div class="item-headline"><i class="fas fa-stream"></i><span>目录</span><span class="toc-percentage"></span></div><div class="toc-content"><ol class="toc"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%89%8D%E8%A8%80"><span class="toc-number">1.</span> <span class="toc-text">前言</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#Ubuntu"><span class="toc-number">2.</span> <span class="toc-text">Ubuntu</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%AE%89%E8%A3%85"><span class="toc-number">2.1.</span> <span class="toc-text">安装</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E4%BD%BF%E7%94%A8"><span class="toc-number">2.2.</span> <span class="toc-text">使用</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E9%85%8D%E7%BD%AE"><span class="toc-number">2.3.</span> <span class="toc-text">配置</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%85%B6%E5%AE%83-Linux-%E7%B3%BB%E7%BB%9F"><span class="toc-number">3.</span> <span class="toc-text">其它 Linux 系统</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%88%9B%E5%BB%BA%E8%84%9A%E6%9C%AC"><span class="toc-number">3.1.</span> <span class="toc-text">创建脚本</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E9%85%8D%E7%BD%AE-1"><span class="toc-number">3.2.</span> <span class="toc-text">配置</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%EF%BC%8C%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD-zram"><span class="toc-number">3.3.</span> <span class="toc-text">开机自启动，自动挂载 zram</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"><span class="toc-number">4.</span> <span class="toc-text">参考文章</span></a></li></ol></div></div><div class="card-widget card-recent-post"><div class="item-headline"><i class="fas fa-history"></i><span>最新文章</span></div><div class="aside-list"><div class="aside-list-item no-cover"><div class="content"><a class="title" href="/blog/message" title="留言">留言</a><time datetime="2025-08-25T01:57:24.603Z" title="发表于 2025-08-25 09:57:24">2025-08-25</time></div></div><div class="aside-list-item no-cover"><div class="content"><a class="title" href="/blog/notes/7" title="香港-深圳-广州游">香港-深圳-广州游</a><time datetime="2025-08-21T09:16:49.000Z" title="发表于 2025-08-21 17:16:49">2025-08-21</time></div></div><div class="aside-list-item no-cover"><div class="content"><a class="title" href="/blog/posts/%E6%9E%84%E5%BB%BA/compile-nginx" title="编译Nginx以升级openssl并支持brotli">编译Nginx以升级openssl并支持brotli</a><time datetime="2025-02-05T09:06:01.000Z" title="发表于 2025-02-05 17:06:01">2025-02-05</time></div></div><div class="aside-list-item no-cover"><div class="content"><a class="title" href="/blog/posts/%E6%9E%84%E5%BB%BA/compile-immortalwrt" title="自行编译OpenWrt(ImmortalWrt) 固件">自行编译OpenWrt(ImmortalWrt) 固件</a><time datetime="2025-02-03T21:53:38.125Z" title="发表于 2025-02-04 05:53:38">2025-02-04</time></div></div><div class="aside-list-item no-cover"><div class="content"><a class="title" href="/blog/posts/%E6%9E%84%E5%BB%BA/compile-lede" title="自行编译OpenWrt(LEDE) 固件">自行编译OpenWrt(LEDE) 固件</a><time datetime="2025-02-03T09:33:20.566Z" title="发表于 2025-02-03 17:33:20">2025-02-03</time></div></div></div></div></div></div></main><footer id="footer"><div class="footer-other"><div class="footer-copyright"><span class="copyright">©&nbsp;2023 - 2025 By 行雺</span></div></div></footer></div><div id="rightside"><div id="rightside-config-hide"><button id="readmode" type="button" title="阅读模式"><i class="fas fa-book-open"></i></button><button id="darkmode" type="button" title="日间和夜间模式切换"><i class="fas fa-adjust"></i></button><button id="hide-aside-btn" type="button" title="单栏和双栏切换"><i class="fas fa-arrows-alt-h"></i></button></div><div id="rightside-config-show"><button id="rightside-config" type="button" title="设置"><i class="fas fa-cog fa-spin"></i></button><button class="close" id="mobile-toc-button" type="button" title="目录"><i class="fas fa-list-ul"></i></button><button id="go-up" type="button" title="回到顶部"><span class="scroll-percent"></span><i class="fas fa-arrow-up"></i></button></div></div><div><script src="/blog/js/utils.js"></script><script src="/blog/js/main.js"></script><script src="/blog/pluginsSrc/instant.page/instantpage.js" type="module"></script><div class="js-pjax"></div><script src="/blog/pluginsSrc/pjax/pjax.min.js"></script><script>(() => {
  const pjaxSelectors = ["head > title","#config-diff","#body-wrap","#rightside-config-hide","#rightside-config-show",".js-pjax"]

  window.pjax = new Pjax({
    elements: 'a:not([target="_blank"])',
    selectors: pjaxSelectors,
    cacheBust: false,
    analytics: false,
    scrollRestoration: false
  })

  const triggerPjaxFn = (val) => {
    if (!val) return
    Object.values(val).forEach(fn => fn())
  }

  document.addEventListener('pjax:send', () => {
    // removeEventListener
    btf.removeGlobalFnEvent('pjaxSendOnce')
    btf.removeGlobalFnEvent('themeChange')

    // reset readmode
    const $bodyClassList = document.body.classList
    if ($bodyClassList.contains('read-mode')) $bodyClassList.remove('read-mode')

    triggerPjaxFn(window.globalFn.pjaxSend)
  })

  document.addEventListener('pjax:complete', () => {
    btf.removeGlobalFnEvent('pjaxCompleteOnce')
    document.querySelectorAll('script[data-pjax]').forEach(item => {
      const newScript = document.createElement('script')
      const content = item.text || item.textContent || item.innerHTML || ""
      Array.from(item.attributes).forEach(attr => newScript.setAttribute(attr.name, attr.value))
      newScript.appendChild(document.createTextNode(content))
      item.parentNode.replaceChild(newScript, item)
    })

    triggerPjaxFn(window.globalFn.pjaxComplete)
  })

  document.addEventListener('pjax:error', e => {
    if (e.request.status === 404) {
      const usePjax = true
      false
        ? (usePjax ? pjax.loadUrl('/blog/404') : window.location.href = '/blog/404')
        : window.location.href = e.request.responseURL
    }
  })
})()</script></div></body></html>