<!DOCTYPE html><html lang="zh-CN" data-theme="light"><head><meta charset="UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1.0,viewport-fit=cover"><title>在Linux云服务器上开启zSwap | 行雺のBlog | Hexo</title><meta name="author" content="行雺"><meta name="copyright" content="行雺"><meta name="format-detection" content="telephone=no"><meta name="theme-color" content="#ffffff"><meta name="description" content="什么是 zSwapzSwap 是 Linux 内核的一个功能，它为交换页提供了一个压缩的回写缓存，作为一种虚拟内存压缩形式。当内存页要被换出时，zSwap 不会把它们移到交换设备上，而是对它们进行压缩，然后把它们存储到系统 RAM 中动态分配的内存池中。后来，向实际的交换设备的回写被推迟了，甚至完全避免了，从而大大减少了需要交换的 Linux 系统的 I/O，其代价是需要额外的 CPU">
<meta property="og:type" content="article">
<meta property="og:title" content="在Linux云服务器上开启zSwap">
<meta property="og:url" content="https://lyxot.github.io/blog/posts/%E6%8C%87%E5%8D%97/configure-zSwap-on-server">
<meta property="og:site_name" content="行雺のBlog | Hexo">
<meta property="og:description" content="什么是 zSwapzSwap 是 Linux 内核的一个功能，它为交换页提供了一个压缩的回写缓存，作为一种虚拟内存压缩形式。当内存页要被换出时，zSwap 不会把它们移到交换设备上，而是对它们进行压缩，然后把它们存储到系统 RAM 中动态分配的内存池中。后来，向实际的交换设备的回写被推迟了，甚至完全避免了，从而大大减少了需要交换的 Linux 系统的 I/O，其代价是需要额外的 CPU">
<meta property="og:locale" content="zh_CN">
<meta property="og:image" content="https://q2.qlogo.cn/headimg_dl?dst_uin=1169942595@qq.com&amp;spec=640">
<meta property="article:published_time" content="2024-04-13T09:32:11.000Z">
<meta property="article:modified_time" content="2025-02-03T05:44:19.370Z">
<meta property="article:author" content="行雺">
<meta property="article:tag" content="hexo,php,blog,行雺,博客,Github,Gitee,pages">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://q2.qlogo.cn/headimg_dl?dst_uin=1169942595@qq.com&amp;spec=640"><script type="application/ld+json">{
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": "在Linux云服务器上开启zSwap",
  "url": "https://lyxot.github.io/blog/posts/%E6%8C%87%E5%8D%97/configure-zSwap-on-server",
  "image": "https://q2.qlogo.cn/headimg_dl?dst_uin=1169942595@qq.com&spec=640",
  "datePublished": "2024-04-13T09:32:11.000Z",
  "dateModified": "2025-02-03T05:44:19.370Z",
  "author": [
    {
      "@type": "Person",
      "name": "行雺",
      "url": "https://Lyxot.github.io/blog"
    }
  ]
}</script><link rel="shortcut icon" href="/blog/./favicon.png"><link rel="canonical" href="https://lyxot.github.io/blog/posts/%E6%8C%87%E5%8D%97/configure-zSwap-on-server"><link rel="preconnect"><link rel="stylesheet" href="/blog/css/index.css"><link rel="stylesheet" href="/blog/pluginsSrc/@fortawesome/fontawesome-free/css/all.min.css"><script>
    (() => {
      
    const saveToLocal = {
      set: (key, value, ttl) => {
        if (!ttl) return
        const expiry = Date.now() + ttl * 86400000
        localStorage.setItem(key, JSON.stringify({ value, expiry }))
      },
      get: key => {
        const itemStr = localStorage.getItem(key)
        if (!itemStr) return undefined
        const { value, expiry } = JSON.parse(itemStr)
        if (Date.now() > expiry) {
          localStorage.removeItem(key)
          return undefined
        }
        return value
      }
    }

    window.btf = {
      saveToLocal,
      getScript: (url, attr = {}) => new Promise((resolve, reject) => {
        const script = document.createElement('script')
        script.src = url
        script.async = true
        Object.entries(attr).forEach(([key, val]) => script.setAttribute(key, val))
        script.onload = script.onreadystatechange = () => {
          if (!script.readyState || /loaded|complete/.test(script.readyState)) resolve()
        }
        script.onerror = reject
        document.head.appendChild(script)
      }),
      getCSS: (url, id) => new Promise((resolve, reject) => {
        const link = document.createElement('link')
        link.rel = 'stylesheet'
        link.href = url
        if (id) link.id = id
        link.onload = link.onreadystatechange = () => {
          if (!link.readyState || /loaded|complete/.test(link.readyState)) resolve()
        }
        link.onerror = reject
        document.head.appendChild(link)
      }),
      addGlobalFn: (key, fn, name = false, parent = window) => {
        if (!true && key.startsWith('pjax')) return
        const globalFn = parent.globalFn || {}
        globalFn[key] = globalFn[key] || {}
        globalFn[key][name || Object.keys(globalFn[key]).length] = fn
        parent.globalFn = globalFn
      }
    }
  
      
      const activateDarkMode = () => {
        document.documentElement.setAttribute('data-theme', 'dark')
        if (document.querySelector('meta[name="theme-color"]') !== null) {
          document.querySelector('meta[name="theme-color"]').setAttribute('content', '#0d0d0d')
        }
      }
      const activateLightMode = () => {
        document.documentElement.setAttribute('data-theme', 'light')
        if (document.querySelector('meta[name="theme-color"]') !== null) {
          document.querySelector('meta[name="theme-color"]').setAttribute('content', '#ffffff')
        }
      }

      btf.activateDarkMode = activateDarkMode
      btf.activateLightMode = activateLightMode

      const theme = saveToLocal.get('theme')
    
          theme === 'dark' ? activateDarkMode() : theme === 'light' ? activateLightMode() : null
        
      
      const asideStatus = saveToLocal.get('aside-status')
      if (asideStatus !== undefined) {
        document.documentElement.classList.toggle('hide-aside', asideStatus === 'hide')
      }
    
      
    const detectApple = () => {
      if (/iPad|iPhone|iPod|Macintosh/.test(navigator.userAgent)) {
        document.documentElement.classList.add('apple')
      }
    }
    detectApple()
  
    })()
  </script><script>const GLOBAL_CONFIG = {
  root: '/blog/',
  algolia: undefined,
  localSearch: undefined,
  translate: undefined,
  highlight: {"plugin":"highlight.js","highlightCopy":true,"highlightLang":true,"highlightHeightLimit":false,"highlightFullpage":false,"highlightMacStyle":false},
  copy: {
    success: '复制成功',
    error: '复制失败',
    noSupport: '浏览器不支持'
  },
  relativeDate: {
    homepage: false,
    post: false
  },
  runtime: '',
  dateSuffix: {
    just: '刚刚',
    min: '分钟前',
    hour: '小时前',
    day: '天前',
    month: '个月前'
  },
  copyright: undefined,
  lightbox: 'null',
  Snackbar: undefined,
  infinitegrid: {
    js: '/blog/pluginsSrc/@egjs/infinitegrid/dist/infinitegrid.min.js',
    buttonText: '加载更多'
  },
  isPhotoFigcaption: false,
  islazyloadPlugin: false,
  isAnchor: false,
  percent: {
    toc: true,
    rightside: false,
  },
  autoDarkmode: false
}</script><script id="config-diff">var GLOBAL_CONFIG_SITE = {
  title: '在Linux云服务器上开启zSwap',
  isHighlightShrink: false,
  isToc: true,
  pageType: 'post'
}</script><link rel="stylesheet" href="/css/modify.css"><meta name="generator" content="Hexo 7.3.0"></head><body><div id="loading-box"><div class="loading-left-bg"></div><div class="loading-right-bg"></div><div class="spinner-box"><div class="configure-border-1"><div class="configure-core"></div></div><div class="configure-border-2"><div class="configure-core"></div></div><div class="loading-word">加载中...</div></div></div><script>(()=>{
  const $loadingBox = document.getElementById('loading-box')
  const $body = document.body
  const preloader = {
    endLoading: () => {
      if ($loadingBox.classList.contains('loaded')) return
      $body.style.overflow = ''
      $loadingBox.classList.add('loaded')
    },
    initLoading: () => {
      $body.style.overflow = 'hidden'
      $loadingBox.classList.remove('loaded')
    }
  }

  preloader.initLoading()

  if (document.readyState === 'complete') {
    preloader.endLoading()
  } else {
    window.addEventListener('load', preloader.endLoading)
    document.addEventListener('DOMContentLoaded', preloader.endLoading)
    // Add timeout protection: force end after 7 seconds
    setTimeout(preloader.endLoading, 7000)
  }

  if (true) {
    btf.addGlobalFn('pjaxSend', preloader.initLoading, 'preloader_init')
    btf.addGlobalFn('pjaxComplete', preloader.endLoading, 'preloader_end')
  }
})()</script><div id="sidebar"><div id="menu-mask"></div><div id="sidebar-menus"><div class="avatar-img text-center"><img src="https://q2.qlogo.cn/headimg_dl?dst_uin=1169942595@qq.com&amp;spec=640" onerror="this.onerror=null;this.src='/blog/img/friend_404.gif'" alt="avatar"></div><div class="site-data text-center"><a href="/blog/archives/"><div class="headline">文章</div><div class="length-num">14</div></a><a href="/blog/tags/"><div class="headline">标签</div><div class="length-num">0</div></a><a href="/blog/categories/"><div class="headline">分类</div><div class="length-num">3</div></a></div><div class="menus_items"><div class="menus_item"><a class="site-page" href="https://hyli.xyz"><span> 个人网站</span></a></div><div class="menus_item"><a class="site-page" href="/blog/"><i class="fa-fw fas fa-home"></i><span> 主页</span></a></div><div class="menus_item"><a class="site-page" href="/blog/archives/"><i class="fa-fw fas fa-archive"></i><span> 归档</span></a></div><div class="menus_item"><a class="site-page" href="/blog/about/"><i class="fa-fw fas fa-heart"></i><span> 关于</span></a></div><div class="menus_item"><a class="site-page" href="https://github.com/Lyxot"><i class="fa-fw fab fa-github"></i><span> Github</span></a></div></div></div></div><div class="post type-post" id="body-wrap"><header class="post-bg" id="page-header" style="background-image: url(/blog/./background/032_47621790.jpg);"><nav id="nav"><span id="blog-info"><a class="nav-site-title" href="/blog/"><span class="site-name">行雺のBlog | Hexo</span></a><a class="nav-page-title" href="/blog/"><span class="site-name">在Linux云服务器上开启zSwap</span><span class="site-name"><i class="fa-solid fa-circle-arrow-left"></i><span>  返回首页</span></span></a></span><div id="menus"><div class="menus_items"><div class="menus_item"><a class="site-page" href="https://hyli.xyz"><span> 个人网站</span></a></div><div class="menus_item"><a class="site-page" href="/blog/"><i class="fa-fw fas fa-home"></i><span> 主页</span></a></div><div class="menus_item"><a class="site-page" href="/blog/archives/"><i class="fa-fw fas fa-archive"></i><span> 归档</span></a></div><div class="menus_item"><a class="site-page" href="/blog/about/"><i class="fa-fw fas fa-heart"></i><span> 关于</span></a></div><div class="menus_item"><a class="site-page" href="https://github.com/Lyxot"><i class="fa-fw fab fa-github"></i><span> Github</span></a></div></div><div id="toggle-menu"><span class="site-page"><i class="fas fa-bars fa-fw"></i></span></div></div></nav><div id="post-info"><h1 class="post-title">在Linux云服务器上开启zSwap</h1><div id="post-meta"><div class="meta-firstline"><span class="post-meta-date"><i class="far fa-calendar-alt fa-fw post-meta-icon"></i><span class="post-meta-label">发表于</span><time class="post-meta-date-created" datetime="2024-04-13T09:32:11.000Z" title="发表于 2024-04-13 17:32:11">2024-04-13</time><span class="post-meta-separator">|</span><i class="fas fa-history fa-fw post-meta-icon"></i><span class="post-meta-label">更新于</span><time class="post-meta-date-updated" datetime="2025-02-03T05:44:19.370Z" title="更新于 2025-02-03 13:44:19">2025-02-03</time></span><span class="post-meta-categories"><span class="post-meta-separator">|</span><i class="fas fa-inbox fa-fw post-meta-icon"></i><a class="post-meta-categories" href="/blog/categories/%E6%8C%87%E5%8D%97/">指南</a></span></div><div class="meta-secondline"><span class="post-meta-separator">|</span><span class="post-meta-wordcount"><i class="far fa-file-word fa-fw post-meta-icon"></i><span class="post-meta-label">总字数:</span><span class="word-count">1.7k</span><span class="post-meta-separator">|</span><i class="far fa-clock fa-fw post-meta-icon"></i><span class="post-meta-label">阅读时长:</span><span>5分钟</span></span></div></div></div></header><main class="layout" id="content-inner"><div id="post"><div class="top-img" style="background-image: url(/blog/./background/032_47621790.jpg);"></div><article class="container post-content" id="article-container"><div id="post-outdate-notice" data="{&quot;limitDay&quot;:500,&quot;messagePrev&quot;:&quot;It has been&quot;,&quot;messageNext&quot;:&quot;days since the last update, the content of the article may be outdated.&quot;,&quot;postUpdate&quot;:&quot;2025-02-03 13:44:19&quot;}" hidden=""></div><h2 id="什么是-zSwap"><a href="#什么是-zSwap" class="headerlink" title="什么是 zSwap"></a>什么是 <code>zSwap</code></h2><p><code>zSwap</code> 是 Linux 内核的一个功能，它为交换页提供了一个压缩的回写缓存，作为一种虚拟内存压缩形式。当内存页要被换出时，<code>zSwap</code> 不会把它们移到交换设备上，而是对它们进行压缩，然后把它们存储到系统 RAM 中动态分配的内存池中。后来，向实际的交换设备的回写被推迟了，甚至完全避免了，从而大大减少了需要交换的 Linux 系统的 I/O，其代价是需要额外的 CPU 周期来执行压缩。</p>
<p><code>zSwap</code> 允许 Linux 更有效地利用 RAM，因为它实际上增加了内存容量，而不是在压缩/解压缩交换页时稍微增加 CPU 的使用。与 <code>zram</code> 相比的区别在于，<code>zswap</code> 与 <code>swap</code> 设备协同工作，而 <code>zram</code> 是内存中的交换设备，不需要后备交换设备。<code>zSwap</code> 存在于内核中，但默认并没有开启，要使用它必须通过修改配置文件开启。</p>
<h2 id="主流内存压缩技术"><a href="#主流内存压缩技术" class="headerlink" title="主流内存压缩技术"></a>主流内存压缩技术</h2><ul>
<li><code>zSwap</code></li>
</ul>
<p><code>​zSwap</code> 是在 memory 与 flash 之间的一层缓存，当内存需要 <code>swap</code> 出去磁盘的时候，先通过压缩放到 <code>zSwap</code> 中去，<code>zSwap</code> 空间按需增长。达到一定程度后则会按照 <code>LRU</code> 的顺序(前提是使用的内存分配方法需要支持 <code>LRU</code>)将就最旧的 page 解压写入磁盘 swap device，之后将当前的 page 压缩写入 <code>zSwap</code>。</p>
<p><code>zSwap</code> 本身存在一些缺陷或问题：如果开启当 <code>zSwap</code> 满交换出 backing store 的功能, 由于需要将 <code>zSwap</code> 里的内存按 LRU 顺序解压再 swap out，这就要求内存分配器支持 <code>LRU</code> 功能；如果不开启当 <code>zSwap</code> 满交换出 backing store 的功能, 和 <code>zRam</code> 是类似的。</p>
<ul>
<li><code>zRAM</code></li>
</ul>
<p><code>zRram</code> 即压缩的内存，使用内存模拟 block device 的做法。实际不会写到块设备中去，只会压缩后写到模拟的块设备中，其实也就是还是在 RAM 中，只是通过压缩了。由于压缩和解压缩的速度远比读写 I/O 好，因此在移动终端设备广泛被应用。</p>
<p><code>zRram</code> 本身存在一些缺陷或问题：<code>zRam</code> 大小是可灵活配置的，配置多少成为了一个问题；使用 <code>zRam</code> 可能会在低内存场景由于频繁的内存压缩导致 kswapd 进程占 CPU 高；增大了 <code>zRam</code> 配置，对系统内存碎片是否有影响</p>
<ul>
<li><code>zCache</code></li>
</ul>
<p><code>​zCache</code> 是 oracle 提出的一种实现文件页压缩技术，也是 memory 与 block dev 之间的一层存储，与 <code>zSwap</code> 比较接近，但 <code>zCache</code> 目前压缩的是文件页，而 <code>zSwap</code> 和 <code>zRAM</code> 压缩是匿名页。</p>
<h2 id="开启-zSwap"><a href="#开启-zSwap" class="headerlink" title="开启 zSwap"></a>开启 <code>zSwap</code></h2><h3 id="使用内核参数开启"><a href="#使用内核参数开启" class="headerlink" title="使用内核参数开启"></a>使用内核参数开启</h3><p>以 <code>root</code> 身份编辑 <code>grub</code> 配置文件</p>
<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/default/grub</span><br></pre></td></tr></tbody></table></figure>
<p>在 <code>GRUB_CMDLINE_LINUX_DEFAULT</code> 行加入 <code>zswap.enabled=1 zswap.compressor=zstd zswap.zpool=z3fold</code>，完成后如下</p>
<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">"quiet splash zswap.enabled=1 zswap.compressor=zstd zswap.zpool=z3fold"</span></span><br></pre></td></tr></tbody></table></figure>
<p>更新 <code>grub</code> 配置</p>
<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></tbody></table></figure>
<p>重启即可</p>
<h3 id="通过-sysfs-接口进行更改"><a href="#通过-sysfs-接口进行更改" class="headerlink" title="通过 sysfs 接口进行更改"></a>通过 <code>sysfs</code> 接口进行更改</h3><p>由于 zSwap 配置可以在运行时通过 sysfs 接口进行更改，在上述方法无效时，可以通过 service 的方式在开机时自动启动 zSwap</p>
<p>创建 <code>/etc/systemd/system/zswap.service</code></p>
<figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Enable zSwap</span><br><span class="line">After=multi-user.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">RemainAfterExit=true</span><br><span class="line">ExecStart=/usr/bin/init-zswap</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></tbody></table></figure>

<p>创建 <code>/usr/bin/init-zswap</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> /usr/bin/init-zswap</span><br><span class="line"><span class="built_in">chmod</span> +x /usr/bin/init-zswap</span><br></pre></td></tr></tbody></table></figure>
<p>编辑 <code>/usr/bin/init-zswap</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> zstd &gt; /sys/module/zswap/parameters/compressor</span><br><span class="line"><span class="built_in">echo</span> z3fold &gt; /sys/module/zswap/parameters/zpool</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /sys/module/zswap/parameters/enabled</span><br></pre></td></tr></tbody></table></figure>
<p>完成后 <code>sudo systemctl enable zswap</code>，重启即可</p>
<h2 id="配置-zSwap-参数"><a href="#配置-zSwap-参数" class="headerlink" title="配置 zSwap 参数"></a>配置 zSwap 参数</h2><blockquote>
<p>这部分内容来自 <a target="_blank" rel="noopener" href="https://wiki.archlinuxcn.org/wiki/Zswap">zswap - Arch Linux中文维基</a></p>
</blockquote>
<h3 id="当前参数"><a href="#当前参数" class="headerlink" title="当前参数"></a>当前参数</h3><p>zswap 有几个可自定义的参数。可以使用以下方式显示实时设置：</p>
<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grep -R . /sys/module/zswap/parameters</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/sys/module/zswap/parameters/same_filled_pages_enabled:Y</span><br><span class="line">/sys/module/zswap/parameters/enabled:Y</span><br><span class="line">/sys/module/zswap/parameters/max_pool_percent:20</span><br><span class="line">/sys/module/zswap/parameters/compressor:lz4</span><br><span class="line">/sys/module/zswap/parameters/zpool:z3fold</span><br><span class="line">/sys/module/zswap/parameters/accept_threshold_percent:90</span><br></pre></td></tr></tbody></table></figure>
<p>见 <a target="_blank" rel="noopener" href="https://docs.kernel.org/admin-guide/mm/zswap.html">zswap 文档</a> 获取不同参数的描述。</p>
<p>显示初始配置的引导时加载消息可以通过以下方式检索：</p>
<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmesg | grep zswap:</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[    0.317569] zswap: loaded using pool lz4/z3fold</span><br></pre></td></tr></tbody></table></figure>
<h3 id="设定参数"><a href="#设定参数" class="headerlink" title="设定参数"></a>设定参数</h3><h4 id="使用-sysfs"><a href="#使用-sysfs" class="headerlink" title="使用 sysfs"></a>使用 sysfs</h4><p>每个设置都可以在运行时通过 sysfs 接口进行更改。作为示例，要更改 compressor 参数：</p>
<figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> lz4 &gt; /sys/module/zswap/parameters/compressor</span><br></pre></td></tr></tbody></table></figure>
<h4 id="使用内核引导参数"><a href="#使用内核引导参数" class="headerlink" title="使用内核引导参数"></a>使用内核引导参数</h4><p>要持久化参数更改，必须在内核引导参数中添加相应的选项，例如 zswap.compressor=lz4。因此，要永久设定上述所有设置，必须添加以下内核参数：</p>
<figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zswap.enabled=1 zswap.compressor=lz4 zswap.max_pool_percent=20 zswap.zpool=z3fold</span><br></pre></td></tr></tbody></table></figure>
<p>当通过引导参数更改压缩算法时，需要确保在引导期间尽早加载相应的压缩模块（参考 <a target="_blank" rel="noopener" href="https://wiki.archlinuxcn.org/wiki/Zswap#%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95">#压缩算法</a>）。</p>
<h3 id="最大池大小"><a href="#最大池大小" class="headerlink" title="最大池大小"></a>最大池大小</h3><p>存储池不是预先分配的，它可以增长到可用内存总量的一定百分比，默认情况下最多占内存总量的20%。一旦达到此阈值，就会将页从池中逐出到交换设备中。压缩池的最大大小由参数 <code>max_pool_percent</code> 控制。</p>
<h3 id="压缩存储池分配器"><a href="#压缩存储池分配器" class="headerlink" title="压缩存储池分配器"></a>压缩存储池分配器</h3><p><code>zpool</code> 参数控制压缩存储池的管理。</p>
<p>使用 <code>zbud</code> 数据分配器，2个压缩对象被存储到1个页中，这将压缩比限制为2或更小。</p>
<p>更好的 <a target="_blank" rel="noopener" href="https://docs.kernel.org/mm/z3fold.html">z3fold</a> 分配器允许每页最多3个压缩对象。<code>z3fold</code> 的压缩比通常为2.7，而 <code>zbud</code> 的压缩比通常为1.7。</p>
<p>默认情况下，会创建 <code>z3fold</code> 类型的 <code>zpool</code>。使用内核参数 <code>zswap.zpool</code> 在启动时选择另一种方法。数据分配器也可以在稍后阶段通过 <code>sysfs</code> 接口进行更改。</p>
<h3 id="压缩算法"><a href="#压缩算法" class="headerlink" title="压缩算法"></a>压缩算法</h3><p>对于页的压缩，zswap 使用内核加密 API 提供的压缩器模块。默认情况下会使用 <code>lz4</code> 压缩算法，但也可以在启动时使用 <code>zswap.compressor</code> 更改压缩算法。其他选项包括 <code>deflate</code>, <code>lz4hc</code>, <code>lzo</code>, <code>lzo-rle</code>, <code>842</code> 和 <code>zstd</code>。</p>
<p>使用 <code>sysfs</code> 在运行时更改压缩不会有问题，但在本例中，zswap 从 <code>lz4</code> 开始，并在稍后阶段切换到定义的算法。要立即使用另一种算法启动 zswap，必须通过内核引导参数进行设定，并且内核必须尽早加载相应的模块。这可以通过以下步骤来实现：</p>
<ol>
<li>将与所选压缩器相关的模块添加到 <a target="_blank" rel="noopener" href="https://wiki.archlinuxcn.org/wiki/Mkinitcpio#%E6%A8%A1%E5%9D%97%EF%BC%88MODULES%EF%BC%89">mkinitcpio#模块（MODULES）</a> 数组中。</li>
<li>修改 mkinitcpio 配置后重新生成 ramdisk 环境：见 <a target="_blank" rel="noopener" href="https://wiki.archlinuxcn.org/wiki/Mkinitcpio#%E5%88%9B%E5%BB%BA%E5%92%8C%E5%90%AF%E7%94%A8%E9%95%9C%E5%83%8F">mkinitcpio#创建和启用镜像</a>。</li>
<li>在<a target="_blank" rel="noopener" href="https://wiki.archlinuxcn.org/wiki/%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0">内核参数</a>中将 <code>zswap.compressor</code> 设定为你选择的算法。</li>
</ol>
<p>在下次启动时，见 <a target="_blank" rel="noopener" href="https://wiki.archlinuxcn.org/wiki/Zswap#%E5%BD%93%E5%89%8D%E5%8F%82%E6%95%B0">#当前参数</a>来检查 zswap 现在是否使用了请求的压缩器。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a target="_blank" rel="noopener" href="https://www.escapelife.site/posts/bb8a2f74.html">使用 zSWAP、zstd 和 z3fold 来提高操作系统的性能</a><br><a target="_blank" rel="noopener" href="https://wiki.archlinuxcn.org/wiki/Zswap">zswap - Arch Linux中文维基</a></p>
</article><div class="post-copyright"><div class="post-copyright__author"><span class="post-copyright-meta"><i class="fas fa-circle-user fa-fw"></i>文章作者: </span><span class="post-copyright-info"><a href="https://Lyxot.github.io/blog">行雺</a></span></div><div class="post-copyright__type"><span class="post-copyright-meta"><i class="fas fa-square-arrow-up-right fa-fw"></i>文章链接: </span><span class="post-copyright-info"><a href="https://lyxot.github.io/blog/posts/%E6%8C%87%E5%8D%97/configure-zSwap-on-server">https://lyxot.github.io/blog/posts/%E6%8C%87%E5%8D%97/configure-zSwap-on-server</a></span></div><div class="post-copyright__notice"><span class="post-copyright-meta"><i class="fas fa-circle-exclamation fa-fw"></i>版权声明: </span><span class="post-copyright-info">本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">CC BY-NC-SA 4.0</a> 许可协议。转载请注明来源 <a href="https://Lyxot.github.io/blog" target="_blank">行雺のBlog | Hexo</a>！</span></div></div><div class="tag_share"><div class="post-share"><div class="social-share" data-image="https://q2.qlogo.cn/headimg_dl?dst_uin=1169942595@qq.com&amp;spec=640" data-sites="facebook,twitter,wechat,weibo,qq"></div><link rel="stylesheet" href="/blog/pluginsSrc/butterfly-extsrc/sharejs/dist/css/share.min.css" media="print" onload="this.media='all'"><script src="/blog/pluginsSrc/butterfly-extsrc/sharejs/dist/js/social-share.min.js" defer=""></script></div></div><nav class="pagination-post" id="pagination"><a class="pagination-related" href="/blog/posts/%E6%8C%87%E5%8D%97/how-to-optimize-aio-server-efficiency" title="家用 All In One Nas 服务器的降低待机功耗指南"><div class="cover" style="background: var(--default-bg-color)"></div><div class="info"><div class="info-1"><div class="info-item-1">上一篇</div><div class="info-item-2">家用 All In One Nas 服务器的降低待机功耗指南</div></div><div class="info-2"><div class="info-item-1"> 本文面向的群体为有一定基础的用户，主要目的在于如何在尽量不损失性能的前提下降低All In One服务器的待机功耗，而非All In One的具体配置教程  通过文中的方法，我将All In One服务器的待机功耗从70.2W降低到39W，降低幅度约为40%，每月可以节省约20度电 前言All In One服务器的核心就三点：存储、虚拟机、Docker，对于普通家庭用户来说，还有另外三个要求：低成本、低功耗、高稳定度，因此，选择合适的硬件配置和底层系统就显得尤为重要。即使是All In One服务器，功能的解耦也相当重要，应尽量避免因单一功能故障导致的整体崩溃，专业的系统应当做专业的事，而不应该全部集中于某一系统。基于以上的观点，我选择了PVE作为All In One的底层系统，虚拟化Unraid作为Nas系统，硬件则是升级电脑退役下来的旧硬件。 为什么使用PVE而不直接使用Unraid作为底层？常见的底层系统有：Esxi、PVE、Unraid PVE是开源的虚拟化平台，与Unraid同样采用kvm虚拟化技术，可以为普通用户提供相比Unraid更高的自由度和更直观的虚拟机管理界...</div></div></div></a><a class="pagination-related" href="/blog/posts/%E6%8C%87%E5%8D%97/configure-zram-on-server" title="在Linux云服务器上开启zram"><div class="cover" style="background: var(--default-bg-color)"></div><div class="info text-right"><div class="info-1"><div class="info-item-1">下一篇</div><div class="info-item-2">在Linux云服务器上开启zram</div></div><div class="info-2"><div class="info-item-1">前言zram 也称为 zRAM，先前称为 compcache。是 Linux 内核的核心功能，可提供虚拟内存压缩。zram 通过在 RAM 内压缩块设备的分页，直到必须使用硬盘的交换空间，避免在磁盘进行分页，从而提高性能。在本教程中，我将详细说明如何在 Ubuntu 22.04 配置或者启用 zRAM，设置 zRAM 的大小以及如何持久化 zRAM 的配置参数。如果你使用其他 Linux 系统，请跳转到其他Linux系统章节。 Ubuntu安装Ubuntu 上有对应的 apt 软件包，可以使用进行安装 1sudo apt install zram-config  使用安装后，会同时安装 systemctl 的服务，但是主要还是会依赖 zramctl 这个可执行文件 1zramctl -help  配置修改/usr/bin/init-zram-swapping，重启即可。下面附有我的配置，创建与 cpu 核心数量相同的块，zram 大小为内存 (不含 swap) 的一半，算法为zstd 12345678910111213141516#!/bin/shmodprobe zram nu...</div></div></div></a></nav></div><div class="aside-content" id="aside-content"><div class="card-widget card-info text-center"><div class="avatar-img"><img src="https://q2.qlogo.cn/headimg_dl?dst_uin=1169942595@qq.com&amp;spec=640" onerror="this.onerror=null;this.src='/blog/img/friend_404.gif'" alt="avatar"></div><div class="author-info-name">行雺</div><div class="author-info-description">Tech otakus save the world.</div><div class="site-data"><a href="/blog/archives/"><div class="headline">文章</div><div class="length-num">14</div></a><a href="/blog/tags/"><div class="headline">标签</div><div class="length-num">0</div></a><a href="/blog/categories/"><div class="headline">分类</div><div class="length-num">3</div></a></div><a id="card-info-btn" href="https://github.com/Lyxot"><i class="fab fa-github"></i><span>Follow Me</span></a><div class="card-info-social-icons"><a class="social-icon" href="https://github.com/Lyxot" target="_blank" title="Github"><i class="fab fa-github" style="color: #24292e;"></i></a></div></div><div class="sticky_layout"><div class="card-widget" id="card-toc"><div class="item-headline"><i class="fas fa-stream"></i><span>目录</span><span class="toc-percentage"></span></div><div class="toc-content"><ol class="toc"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E4%BB%80%E4%B9%88%E6%98%AF-zSwap"><span class="toc-number">1.</span> <span class="toc-text">什么是 zSwap</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E4%B8%BB%E6%B5%81%E5%86%85%E5%AD%98%E5%8E%8B%E7%BC%A9%E6%8A%80%E6%9C%AF"><span class="toc-number">2.</span> <span class="toc-text">主流内存压缩技术</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%BC%80%E5%90%AF-zSwap"><span class="toc-number">3.</span> <span class="toc-text">开启 zSwap</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E4%BD%BF%E7%94%A8%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0%E5%BC%80%E5%90%AF"><span class="toc-number">3.1.</span> <span class="toc-text">使用内核参数开启</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E9%80%9A%E8%BF%87-sysfs-%E6%8E%A5%E5%8F%A3%E8%BF%9B%E8%A1%8C%E6%9B%B4%E6%94%B9"><span class="toc-number">3.2.</span> <span class="toc-text">通过 sysfs 接口进行更改</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E9%85%8D%E7%BD%AE-zSwap-%E5%8F%82%E6%95%B0"><span class="toc-number">4.</span> <span class="toc-text">配置 zSwap 参数</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%BD%93%E5%89%8D%E5%8F%82%E6%95%B0"><span class="toc-number">4.1.</span> <span class="toc-text">当前参数</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E8%AE%BE%E5%AE%9A%E5%8F%82%E6%95%B0"><span class="toc-number">4.2.</span> <span class="toc-text">设定参数</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E4%BD%BF%E7%94%A8-sysfs"><span class="toc-number">4.2.1.</span> <span class="toc-text">使用 sysfs</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E4%BD%BF%E7%94%A8%E5%86%85%E6%A0%B8%E5%BC%95%E5%AF%BC%E5%8F%82%E6%95%B0"><span class="toc-number">4.2.2.</span> <span class="toc-text">使用内核引导参数</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%9C%80%E5%A4%A7%E6%B1%A0%E5%A4%A7%E5%B0%8F"><span class="toc-number">4.3.</span> <span class="toc-text">最大池大小</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%8E%8B%E7%BC%A9%E5%AD%98%E5%82%A8%E6%B1%A0%E5%88%86%E9%85%8D%E5%99%A8"><span class="toc-number">4.4.</span> <span class="toc-text">压缩存储池分配器</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95"><span class="toc-number">4.5.</span> <span class="toc-text">压缩算法</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0"><span class="toc-number">5.</span> <span class="toc-text">参考文章</span></a></li></ol></div></div><div class="card-widget card-recent-post"><div class="item-headline"><i class="fas fa-history"></i><span>最新文章</span></div><div class="aside-list"><div class="aside-list-item no-cover"><div class="content"><a class="title" href="/blog/posts/%E6%9E%84%E5%BB%BA/compile-nginx" title="编译Nginx以升级openssl并支持brotli">编译Nginx以升级openssl并支持brotli</a><time datetime="2025-02-05T09:06:01.000Z" title="发表于 2025-02-05 17:06:01">2025-02-05</time></div></div><div class="aside-list-item no-cover"><div class="content"><a class="title" href="/blog/posts/%E6%9E%84%E5%BB%BA/compile-immortalwrt" title="自行编译OpenWrt(ImmortalWrt) 固件">自行编译OpenWrt(ImmortalWrt) 固件</a><time datetime="2025-02-03T21:53:38.125Z" title="发表于 2025-02-04 05:53:38">2025-02-04</time></div></div><div class="aside-list-item no-cover"><div class="content"><a class="title" href="/blog/posts/%E6%9E%84%E5%BB%BA/compile-lede" title="自行编译OpenWrt(LEDE) 固件">自行编译OpenWrt(LEDE) 固件</a><time datetime="2025-02-03T09:33:20.566Z" title="发表于 2025-02-03 17:33:20">2025-02-03</time></div></div><div class="aside-list-item no-cover"><div class="content"><a class="title" href="/blog/notes/4" title="行雺の小站 站点正式开通">行雺の小站 站点正式开通</a><time datetime="2025-02-03T01:52:19.000Z" title="发表于 2025-02-03 09:52:19">2025-02-03</time></div></div><div class="aside-list-item no-cover"><div class="content"><a class="title" href="/blog/posts/%E6%8C%87%E5%8D%97/create-unraid-vm-in-pve-and-boot-from-virtual-disk" title="在 PVE 中创建 Unraid 虚拟机并使用虚拟磁盘启动 Unraid 虚拟机">在 PVE 中创建 Unraid 虚拟机并使用虚拟磁盘启动 Unraid 虚拟机</a><time datetime="2024-08-24T23:45:24.000Z" title="发表于 2024-08-25 07:45:24">2024-08-25</time></div></div></div></div></div></div></main><footer id="footer"><div class="footer-other"><div class="footer-copyright"><span class="copyright">©&nbsp;2023 - 2025 By 行雺</span></div></div></footer></div><div id="rightside"><div id="rightside-config-hide"><button id="readmode" type="button" title="阅读模式"><i class="fas fa-book-open"></i></button><button id="darkmode" type="button" title="日间和夜间模式切换"><i class="fas fa-adjust"></i></button><button id="hide-aside-btn" type="button" title="单栏和双栏切换"><i class="fas fa-arrows-alt-h"></i></button></div><div id="rightside-config-show"><button id="rightside-config" type="button" title="设置"><i class="fas fa-cog fa-spin"></i></button><button class="close" id="mobile-toc-button" type="button" title="目录"><i class="fas fa-list-ul"></i></button><button id="go-up" type="button" title="回到顶部"><span class="scroll-percent"></span><i class="fas fa-arrow-up"></i></button></div></div><div><script src="/blog/js/utils.js"></script><script src="/blog/js/main.js"></script><script src="/blog/pluginsSrc/instant.page/instantpage.js" type="module"></script><div class="js-pjax"></div><script src="/blog/pluginsSrc/pjax/pjax.min.js"></script><script>(() => {
  const pjaxSelectors = ["head > title","#config-diff","#body-wrap","#rightside-config-hide","#rightside-config-show",".js-pjax"]

  window.pjax = new Pjax({
    elements: 'a:not([target="_blank"])',
    selectors: pjaxSelectors,
    cacheBust: false,
    analytics: false,
    scrollRestoration: false
  })

  const triggerPjaxFn = (val) => {
    if (!val) return
    Object.values(val).forEach(fn => fn())
  }

  document.addEventListener('pjax:send', () => {
    // removeEventListener
    btf.removeGlobalFnEvent('pjaxSendOnce')
    btf.removeGlobalFnEvent('themeChange')

    // reset readmode
    const $bodyClassList = document.body.classList
    if ($bodyClassList.contains('read-mode')) $bodyClassList.remove('read-mode')

    triggerPjaxFn(window.globalFn.pjaxSend)
  })

  document.addEventListener('pjax:complete', () => {
    btf.removeGlobalFnEvent('pjaxCompleteOnce')
    document.querySelectorAll('script[data-pjax]').forEach(item => {
      const newScript = document.createElement('script')
      const content = item.text || item.textContent || item.innerHTML || ""
      Array.from(item.attributes).forEach(attr => newScript.setAttribute(attr.name, attr.value))
      newScript.appendChild(document.createTextNode(content))
      item.parentNode.replaceChild(newScript, item)
    })

    triggerPjaxFn(window.globalFn.pjaxComplete)
  })

  document.addEventListener('pjax:error', e => {
    if (e.request.status === 404) {
      const usePjax = true
      false
        ? (usePjax ? pjax.loadUrl('/blog/404') : window.location.href = '/blog/404')
        : window.location.href = e.request.responseURL
    }
  })
})()</script></div></body></html>